RAW provider 2021/02/05 09:08:14 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/02/05 09:08:14 Finished
RAW provider 2021/02/05 09:08:14 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/02/05 09:08:14 Finished
RAW provider 2021/02/05 09:08:14 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/02/05 09:08:14 [Configure] Failed to load config:
(*clientcmd.DeferredLoadingClientConfig)(0xc0006165f0)({
 loader: (*clientcmd.ClientConfigLoadingRules)(0xc0006165a0)({
  ExplicitPath: (string) "",
  Precedence: ([]string) <nil>,
  MigrationRules: (map[string]string) <nil>,
  DoNotResolvePaths: (bool) false,
  DefaultClientConfig: (clientcmd.ClientConfig) <nil>,
  WarnIfAllMissing: (bool) false
 }),
 overrides: (*clientcmd.ConfigOverrides)(0xc0003c6b40)({
  AuthInfo: (api.AuthInfo) {
   LocationOfOrigin: (string) "",
   ClientCertificate: (string) "",
   ClientCertificateData: ([]uint8) <nil>,
   ClientKey: (string) "",
   ClientKeyData: ([]uint8) <nil>,
   Token: (string) "",
   TokenFile: (string) "",
   Impersonate: (string) "",
   ImpersonateGroups: ([]string) <nil>,
   ImpersonateUserExtra: (map[string][]string) <nil>,
   Username: (string) "",
   Password: (string) "",
   AuthProvider: (*api.AuthProviderConfig)(<nil>),
   Exec: (*api.ExecConfig)(<nil>),
   Extensions: (map[string]runtime.Object) <nil>
  },
  ClusterDefaults: (api.Cluster) {
   LocationOfOrigin: (string) "",
   Server: (string) "",
   TLSServerName: (string) "",
   InsecureSkipTLSVerify: (bool) false,
   CertificateAuthority: (string) "",
   CertificateAuthorityData: ([]uint8) <nil>,
   Extensions: (map[string]runtime.Object) <nil>
  },
  ClusterInfo: (api.Cluster) {
   LocationOfOrigin: (string) "",
   Server: (string) "",
   TLSServerName: (string) "",
   InsecureSkipTLSVerify: (bool) false,
   CertificateAuthority: (string) "",
   CertificateAuthorityData: ([]uint8) <nil>,
   Extensions: (map[string]runtime.Object) <nil>
  },
  Context: (api.Context) {
   LocationOfOrigin: (string) "",
   Cluster: (string) "",
   AuthInfo: (string) "",
   Namespace: (string) "",
   Extensions: (map[string]runtime.Object) <nil>
  },
  CurrentContext: (string) "",
  Timeout: (string) ""
 }),
 fallbackReader: (io.Reader) <nil>,
 clientConfig: (*clientcmd.DirectClientConfig)(0xc0006a00c0)({
  config: (api.Config) {
   Kind: (string) "",
   APIVersion: (string) "",
   Preferences: (api.Preferences) {
    Colors: (bool) false,
    Extensions: (map[string]runtime.Object) {
    }
   },
   Clusters: (map[string]*api.Cluster) {
   },
   AuthInfos: (map[string]*api.AuthInfo) {
   },
   Contexts: (map[string]*api.Context) {
   },
   CurrentContext: (string) "",
   Extensions: (map[string]runtime.Object) {
   }
  },
  contextName: (string) "",
  overrides: (*clientcmd.ConfigOverrides)(0xc0003c6b40)({
   AuthInfo: (api.AuthInfo) {
    LocationOfOrigin: (string) "",
    ClientCertificate: (string) "",
    ClientCertificateData: ([]uint8) <nil>,
    ClientKey: (string) "",
    ClientKeyData: ([]uint8) <nil>,
    Token: (string) "",
    TokenFile: (string) "",
    Impersonate: (string) "",
    ImpersonateGroups: ([]string) <nil>,
    ImpersonateUserExtra: (map[string][]string) <nil>,
    Username: (string) "",
    Password: (string) "",
    AuthProvider: (*api.AuthProviderConfig)(<nil>),
    Exec: (*api.ExecConfig)(<nil>),
    Extensions: (map[string]runtime.Object) <nil>
   },
   ClusterDefaults: (api.Cluster) {
    LocationOfOrigin: (string) "",
    Server: (string) "",
    TLSServerName: (string) "",
    InsecureSkipTLSVerify: (bool) false,
    CertificateAuthority: (string) "",
    CertificateAuthorityData: ([]uint8) <nil>,
    Extensions: (map[string]runtime.Object) <nil>
   },
   ClusterInfo: (api.Cluster) {
    LocationOfOrigin: (string) "",
    Server: (string) "",
    TLSServerName: (string) "",
    InsecureSkipTLSVerify: (bool) false,
    CertificateAuthority: (string) "",
    CertificateAuthorityData: ([]uint8) <nil>,
    Extensions: (map[string]runtime.Object) <nil>
   },
   Context: (api.Context) {
    LocationOfOrigin: (string) "",
    Cluster: (string) "",
    AuthInfo: (string) "",
    Namespace: (string) "",
    Extensions: (map[string]runtime.Object) <nil>
   },
   CurrentContext: (string) "",
   Timeout: (string) ""
  }),
  fallbackReader: (io.Reader) <nil>,
  configAccess: (*clientcmd.ClientConfigLoadingRules)(0xc0006165a0)({
   ExplicitPath: (string) "",
   Precedence: ([]string) <nil>,
   MigrationRules: (map[string]string) <nil>,
   DoNotResolvePaths: (bool) false,
   DefaultClientConfig: (clientcmd.ClientConfig) <nil>,
   WarnIfAllMissing: (bool) false
  }),
  promptedCredentials: (clientcmd.promptedCredentials) {
   username: (string) "",
   password: (string) ""
  }
 }),
 loadingLock: (sync.Mutex) {
  state: (int32) 0,
  sema: (uint32) 0
 },
 icc: (*clientcmd.inClusterClientConfig)(0xc00011e6e0)({
  overrides: (*clientcmd.ConfigOverrides)(0xc0003c6b40)({
   AuthInfo: (api.AuthInfo) {
    LocationOfOrigin: (string) "",
    ClientCertificate: (string) "",
    ClientCertificateData: ([]uint8) <nil>,
    ClientKey: (string) "",
    ClientKeyData: ([]uint8) <nil>,
    Token: (string) "",
    TokenFile: (string) "",
    Impersonate: (string) "",
    ImpersonateGroups: ([]string) <nil>,
    ImpersonateUserExtra: (map[string][]string) <nil>,
    Username: (string) "",
    Password: (string) "",
    AuthProvider: (*api.AuthProviderConfig)(<nil>),
    Exec: (*api.ExecConfig)(<nil>),
    Extensions: (map[string]runtime.Object) <nil>
   },
   ClusterDefaults: (api.Cluster) {
    LocationOfOrigin: (string) "",
    Server: (string) "",
    TLSServerName: (string) "",
    InsecureSkipTLSVerify: (bool) false,
    CertificateAuthority: (string) "",
    CertificateAuthorityData: ([]uint8) <nil>,
    Extensions: (map[string]runtime.Object) <nil>
   },
   ClusterInfo: (api.Cluster) {
    LocationOfOrigin: (string) "",
    Server: (string) "",
    TLSServerName: (string) "",
    InsecureSkipTLSVerify: (bool) false,
    CertificateAuthority: (string) "",
    CertificateAuthorityData: ([]uint8) <nil>,
    Extensions: (map[string]runtime.Object) <nil>
   },
   Context: (api.Context) {
    LocationOfOrigin: (string) "",
    Cluster: (string) "",
    AuthInfo: (string) "",
    Namespace: (string) "",
    Extensions: (map[string]runtime.Object) <nil>
   },
   CurrentContext: (string) "",
   Timeout: (string) ""
  }),
  inClusterConfigProvider: (func() (*rest.Config, error)) <nil>
 })
})

RAW provider 2021/02/05 09:08:16 Finished
RAW provider 2021/02/05 09:08:38 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/02/05 09:08:38 Finished
RAW provider 2021/02/05 09:08:55 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/02/05 09:08:56 Finished
RAW provider 2021/02/05 09:08:57 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/02/05 09:08:58 Finished
RAW provider 2021/02/05 09:09:01 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/02/05 09:09:02 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://35.190.203.172", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x44, 0x4b, 0x7a, 0x43, 0x43, 0x41, 0x68, 0x4f, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x52, 0x41, 0x4d, 0x68, 0x45, 0x6c, 0x31, 0x69, 0x31, 0x68, 0x51, 0x6b, 0x30, 0x34, 0x49, 0x6c, 0x71, 0x47, 0x72, 0x71, 0x34, 0x52, 0x2b, 0x34, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x77, 0xa, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x4e, 0x32, 0x46, 0x68, 0x5a, 0x54, 0x59, 0x32, 0x4f, 0x54, 0x49, 0x74, 0x4e, 0x54, 0x52, 0x6d, 0x59, 0x69, 0x30, 0x30, 0x5a, 0x6a, 0x46, 0x6a, 0x4c, 0x57, 0x45, 0x32, 0x4e, 0x7a, 0x41, 0x74, 0x59, 0x6a, 0x67, 0x30, 0x5a, 0x54, 0x59, 0x35, 0x4f, 0x54, 0x59, 0x33, 0x59, 0x32, 0x45, 0x35, 0xa, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x49, 0x77, 0x4e, 0x54, 0x41, 0x7a, 0x4d, 0x6a, 0x55, 0x31, 0x4f, 0x56, 0x6f, 0x58, 0x44, 0x54, 0x49, 0x32, 0x4d, 0x44, 0x49, 0x77, 0x4e, 0x44, 0x41, 0x30, 0x4d, 0x6a, 0x55, 0x31, 0x4f, 0x56, 0x6f, 0x77, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x4e, 0x32, 0x46, 0x68, 0xa, 0x5a, 0x54, 0x59, 0x32, 0x4f, 0x54, 0x49, 0x74, 0x4e, 0x54, 0x52, 0x6d, 0x59, 0x69, 0x30, 0x30, 0x5a, 0x6a, 0x46, 0x6a, 0x4c, 0x57, 0x45, 0x32, 0x4e, 0x7a, 0x41, 0x74, 0x59, 0x6a, 0x67, 0x30, 0x5a, 0x54, 0x59, 0x35, 0x4f, 0x54, 0x59, 0x33, 0x59, 0x32, 0x45, 0x35, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0xa, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51, 0x38, 0x41, 0x4d, 0x49, 0x49, 0x42, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x6f, 0x64, 0x53, 0x5a, 0x59, 0x78, 0x4d, 0x6f, 0x2b, 0x79, 0x34, 0x65, 0x41, 0x62, 0x46, 0x49, 0x67, 0x39, 0x4e, 0x53, 0x6a, 0x38, 0x53, 0x7a, 0x64, 0x75, 0x5a, 0x64, 0x74, 0x4d, 0x38, 0x74, 0x70, 0x31, 0x4e, 0x70, 0x2b, 0x33, 0x74, 0x4c, 0xa, 0x38, 0x63, 0x6f, 0x71, 0x4e, 0x4c, 0x39, 0x4f, 0x50, 0x55, 0x4f, 0x33, 0x77, 0x69, 0x77, 0x74, 0x46, 0x37, 0x70, 0x54, 0x62, 0x55, 0x68, 0x2b, 0x4f, 0x55, 0x50, 0x61, 0x30, 0x5a, 0x2b, 0x66, 0x42, 0x6f, 0x68, 0x61, 0x59, 0x47, 0x52, 0x78, 0x55, 0x55, 0x4b, 0x38, 0x34, 0x42, 0x6b, 0x63, 0x4a, 0x79, 0x6e, 0x6c, 0x33, 0x34, 0x75, 0x4d, 0x2f, 0x68, 0x39, 0x56, 0x62, 0x6b, 0x68, 0x6d, 0xa, 0x79, 0x39, 0x35, 0x53, 0x5a, 0x51, 0x56, 0x41, 0x59, 0x6e, 0x67, 0x6d, 0x38, 0x73, 0x78, 0x77, 0x73, 0x4c, 0x54, 0x31, 0x67, 0x37, 0x47, 0x61, 0x61, 0x67, 0x4b, 0x73, 0x71, 0x67, 0x30, 0x71, 0x44, 0x33, 0x46, 0x37, 0x43, 0x76, 0x41, 0x65, 0x7a, 0x62, 0x76, 0x42, 0x30, 0x73, 0x48, 0x68, 0x2b, 0x78, 0x39, 0x70, 0x74, 0x59, 0x66, 0x75, 0x70, 0x38, 0x59, 0x46, 0x7a, 0x47, 0x6c, 0x2b, 0xa, 0x46, 0x4b, 0x42, 0x31, 0x34, 0x66, 0x79, 0x35, 0x36, 0x35, 0x6f, 0x46, 0x44, 0x79, 0x2b, 0x37, 0x56, 0x65, 0x4b, 0x75, 0x74, 0x6d, 0x73, 0x2b, 0x35, 0x35, 0x7a, 0x6e, 0x44, 0x38, 0x36, 0x62, 0x78, 0x4c, 0x75, 0x71, 0x71, 0x61, 0x2f, 0x4b, 0x4a, 0x41, 0x68, 0x78, 0x6c, 0x52, 0x75, 0x48, 0x36, 0x2b, 0x57, 0x38, 0x38, 0x7a, 0x59, 0x6a, 0x6b, 0x32, 0x4f, 0x68, 0x42, 0x48, 0x45, 0x62, 0xa, 0x67, 0x6d, 0x39, 0x2f, 0x44, 0x58, 0x43, 0x5a, 0x6c, 0x2b, 0x56, 0x6d, 0x52, 0x4c, 0x70, 0x43, 0x4f, 0x6a, 0x76, 0x6e, 0x59, 0x4f, 0x4e, 0x4c, 0x78, 0x66, 0x51, 0x69, 0x50, 0x62, 0x36, 0x37, 0x61, 0x6e, 0x71, 0x77, 0x70, 0x4f, 0x75, 0x38, 0x6e, 0x48, 0x6d, 0x57, 0x31, 0x50, 0x4c, 0x34, 0x45, 0x2b, 0x35, 0x65, 0x67, 0x56, 0x56, 0x4b, 0x41, 0x6a, 0x7a, 0x49, 0x57, 0x45, 0x73, 0x79, 0xa, 0x66, 0x47, 0x62, 0x4f, 0x37, 0x46, 0x31, 0x33, 0x34, 0x37, 0x4d, 0x4f, 0x5a, 0x78, 0x62, 0x36, 0x4e, 0x39, 0x4c, 0x35, 0x4b, 0x30, 0x74, 0x42, 0x44, 0x43, 0x6d, 0x69, 0x6a, 0x2f, 0x55, 0x51, 0x39, 0x67, 0x36, 0x64, 0x37, 0x31, 0x58, 0x5a, 0x51, 0x69, 0x69, 0x64, 0x54, 0x51, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0x6f, 0x30, 0x49, 0x77, 0x51, 0x44, 0x41, 0x4f, 0x42, 0x67, 0x4e, 0x56, 0xa, 0x48, 0x51, 0x38, 0x42, 0x41, 0x66, 0x38, 0x45, 0x42, 0x41, 0x4d, 0x43, 0x41, 0x67, 0x51, 0x77, 0x44, 0x77, 0x59, 0x44, 0x56, 0x52, 0x30, 0x54, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x55, 0x77, 0x41, 0x77, 0x45, 0x42, 0x2f, 0x7a, 0x41, 0x64, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x51, 0x34, 0x45, 0x46, 0x67, 0x51, 0x55, 0x73, 0x57, 0x50, 0x58, 0x54, 0x30, 0x73, 0x49, 0x71, 0x68, 0x75, 0x48, 0xa, 0x7a, 0x44, 0x4b, 0x43, 0x75, 0x43, 0x48, 0x48, 0x58, 0x49, 0x32, 0x59, 0x33, 0x4e, 0x55, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x47, 0x4c, 0x73, 0x69, 0x35, 0x46, 0x6f, 0x72, 0x51, 0x55, 0x4e, 0x2b, 0x77, 0x35, 0x54, 0x4b, 0x61, 0x41, 0x46, 0x4a, 0x75, 0x71, 0x50, 0xa, 0x42, 0x6a, 0x4a, 0x53, 0x6d, 0x5a, 0x73, 0x57, 0x65, 0x6a, 0x46, 0x74, 0x6a, 0x75, 0x5a, 0x6e, 0x5a, 0x51, 0x45, 0x67, 0x37, 0x6d, 0x48, 0x33, 0x74, 0x6a, 0x4d, 0x76, 0x44, 0x76, 0x56, 0x6d, 0x6c, 0x6a, 0x49, 0x61, 0x58, 0x6f, 0x6e, 0x48, 0x41, 0x42, 0x2f, 0x6e, 0x52, 0x47, 0x41, 0x59, 0x69, 0x67, 0x43, 0x6e, 0x47, 0x6e, 0x63, 0x72, 0x78, 0x53, 0x35, 0x77, 0x69, 0x70, 0x45, 0x5a, 0xa, 0x48, 0x2b, 0x69, 0x56, 0x48, 0x4e, 0x6c, 0x30, 0x4a, 0x4f, 0x50, 0x58, 0x70, 0x53, 0x5a, 0x42, 0x35, 0x6d, 0x43, 0x4e, 0x36, 0x77, 0x66, 0x49, 0x71, 0x53, 0x78, 0x52, 0x43, 0x50, 0x7a, 0x70, 0x4f, 0x6c, 0x67, 0x49, 0x76, 0x62, 0x74, 0x71, 0x52, 0x4a, 0x57, 0x74, 0x50, 0x6d, 0x41, 0x6a, 0x37, 0x50, 0x71, 0x6a, 0x6c, 0x75, 0x31, 0x79, 0x4a, 0x6b, 0x75, 0x4c, 0x73, 0x53, 0x62, 0x64, 0xa, 0x54, 0x67, 0x32, 0x32, 0x2f, 0x76, 0x51, 0x34, 0x76, 0x51, 0x51, 0x4e, 0x54, 0x45, 0x77, 0x54, 0x6e, 0x4c, 0x57, 0x74, 0x58, 0x34, 0x4b, 0x30, 0x57, 0x38, 0x52, 0x65, 0x33, 0x59, 0x6c, 0x33, 0x46, 0x70, 0x37, 0x35, 0x59, 0x71, 0x6a, 0x49, 0x62, 0x2f, 0x71, 0x52, 0x32, 0x43, 0x34, 0x78, 0x4f, 0x74, 0x39, 0x2b, 0x76, 0x6e, 0x72, 0x33, 0x47, 0x34, 0x36, 0x35, 0x59, 0x31, 0x33, 0x4d, 0xa, 0x69, 0x48, 0x76, 0x64, 0x4c, 0x6f, 0x51, 0x57, 0x33, 0x77, 0x30, 0x6d, 0x63, 0x59, 0x46, 0x52, 0x62, 0x78, 0x4c, 0x35, 0x33, 0x31, 0x38, 0x57, 0x61, 0x68, 0x49, 0x30, 0x38, 0x6d, 0x67, 0x74, 0x4d, 0x50, 0x72, 0x67, 0x44, 0x2b, 0x55, 0x59, 0x6e, 0x6a, 0x41, 0x57, 0x4d, 0x53, 0x62, 0x6a, 0x65, 0x30, 0x49, 0x6b, 0x4b, 0x79, 0x68, 0x44, 0x68, 0x36, 0x36, 0x72, 0x6b, 0x78, 0x33, 0x6c, 0xa, 0x48, 0x2f, 0x42, 0x66, 0x59, 0x6f, 0x4f, 0x73, 0x45, 0x47, 0x50, 0x6f, 0x77, 0x63, 0x45, 0x34, 0x65, 0x70, 0x78, 0x75, 0x4f, 0x6b, 0x6f, 0x4a, 0x62, 0x6e, 0x68, 0x33, 0x53, 0x33, 0x59, 0x48, 0x49, 0x33, 0x62, 0x59, 0x62, 0x6f, 0x4c, 0x74, 0x78, 0x62, 0x71, 0x53, 0x41, 0x74, 0x74, 0x34, 0x6e, 0x38, 0x74, 0x2f, 0x64, 0x53, 0x39, 0x73, 0x55, 0x7a, 0x38, 0x69, 0x38, 0x54, 0x30, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/02/05 09:09:02 Finished
RAW provider 2021/02/05 09:09:05 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/02/05 09:09:07 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://35.190.203.172", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x44, 0x4b, 0x7a, 0x43, 0x43, 0x41, 0x68, 0x4f, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x52, 0x41, 0x4d, 0x68, 0x45, 0x6c, 0x31, 0x69, 0x31, 0x68, 0x51, 0x6b, 0x30, 0x34, 0x49, 0x6c, 0x71, 0x47, 0x72, 0x71, 0x34, 0x52, 0x2b, 0x34, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x77, 0xa, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x4e, 0x32, 0x46, 0x68, 0x5a, 0x54, 0x59, 0x32, 0x4f, 0x54, 0x49, 0x74, 0x4e, 0x54, 0x52, 0x6d, 0x59, 0x69, 0x30, 0x30, 0x5a, 0x6a, 0x46, 0x6a, 0x4c, 0x57, 0x45, 0x32, 0x4e, 0x7a, 0x41, 0x74, 0x59, 0x6a, 0x67, 0x30, 0x5a, 0x54, 0x59, 0x35, 0x4f, 0x54, 0x59, 0x33, 0x59, 0x32, 0x45, 0x35, 0xa, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x49, 0x77, 0x4e, 0x54, 0x41, 0x7a, 0x4d, 0x6a, 0x55, 0x31, 0x4f, 0x56, 0x6f, 0x58, 0x44, 0x54, 0x49, 0x32, 0x4d, 0x44, 0x49, 0x77, 0x4e, 0x44, 0x41, 0x30, 0x4d, 0x6a, 0x55, 0x31, 0x4f, 0x56, 0x6f, 0x77, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x4e, 0x32, 0x46, 0x68, 0xa, 0x5a, 0x54, 0x59, 0x32, 0x4f, 0x54, 0x49, 0x74, 0x4e, 0x54, 0x52, 0x6d, 0x59, 0x69, 0x30, 0x30, 0x5a, 0x6a, 0x46, 0x6a, 0x4c, 0x57, 0x45, 0x32, 0x4e, 0x7a, 0x41, 0x74, 0x59, 0x6a, 0x67, 0x30, 0x5a, 0x54, 0x59, 0x35, 0x4f, 0x54, 0x59, 0x33, 0x59, 0x32, 0x45, 0x35, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0xa, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51, 0x38, 0x41, 0x4d, 0x49, 0x49, 0x42, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x6f, 0x64, 0x53, 0x5a, 0x59, 0x78, 0x4d, 0x6f, 0x2b, 0x79, 0x34, 0x65, 0x41, 0x62, 0x46, 0x49, 0x67, 0x39, 0x4e, 0x53, 0x6a, 0x38, 0x53, 0x7a, 0x64, 0x75, 0x5a, 0x64, 0x74, 0x4d, 0x38, 0x74, 0x70, 0x31, 0x4e, 0x70, 0x2b, 0x33, 0x74, 0x4c, 0xa, 0x38, 0x63, 0x6f, 0x71, 0x4e, 0x4c, 0x39, 0x4f, 0x50, 0x55, 0x4f, 0x33, 0x77, 0x69, 0x77, 0x74, 0x46, 0x37, 0x70, 0x54, 0x62, 0x55, 0x68, 0x2b, 0x4f, 0x55, 0x50, 0x61, 0x30, 0x5a, 0x2b, 0x66, 0x42, 0x6f, 0x68, 0x61, 0x59, 0x47, 0x52, 0x78, 0x55, 0x55, 0x4b, 0x38, 0x34, 0x42, 0x6b, 0x63, 0x4a, 0x79, 0x6e, 0x6c, 0x33, 0x34, 0x75, 0x4d, 0x2f, 0x68, 0x39, 0x56, 0x62, 0x6b, 0x68, 0x6d, 0xa, 0x79, 0x39, 0x35, 0x53, 0x5a, 0x51, 0x56, 0x41, 0x59, 0x6e, 0x67, 0x6d, 0x38, 0x73, 0x78, 0x77, 0x73, 0x4c, 0x54, 0x31, 0x67, 0x37, 0x47, 0x61, 0x61, 0x67, 0x4b, 0x73, 0x71, 0x67, 0x30, 0x71, 0x44, 0x33, 0x46, 0x37, 0x43, 0x76, 0x41, 0x65, 0x7a, 0x62, 0x76, 0x42, 0x30, 0x73, 0x48, 0x68, 0x2b, 0x78, 0x39, 0x70, 0x74, 0x59, 0x66, 0x75, 0x70, 0x38, 0x59, 0x46, 0x7a, 0x47, 0x6c, 0x2b, 0xa, 0x46, 0x4b, 0x42, 0x31, 0x34, 0x66, 0x79, 0x35, 0x36, 0x35, 0x6f, 0x46, 0x44, 0x79, 0x2b, 0x37, 0x56, 0x65, 0x4b, 0x75, 0x74, 0x6d, 0x73, 0x2b, 0x35, 0x35, 0x7a, 0x6e, 0x44, 0x38, 0x36, 0x62, 0x78, 0x4c, 0x75, 0x71, 0x71, 0x61, 0x2f, 0x4b, 0x4a, 0x41, 0x68, 0x78, 0x6c, 0x52, 0x75, 0x48, 0x36, 0x2b, 0x57, 0x38, 0x38, 0x7a, 0x59, 0x6a, 0x6b, 0x32, 0x4f, 0x68, 0x42, 0x48, 0x45, 0x62, 0xa, 0x67, 0x6d, 0x39, 0x2f, 0x44, 0x58, 0x43, 0x5a, 0x6c, 0x2b, 0x56, 0x6d, 0x52, 0x4c, 0x70, 0x43, 0x4f, 0x6a, 0x76, 0x6e, 0x59, 0x4f, 0x4e, 0x4c, 0x78, 0x66, 0x51, 0x69, 0x50, 0x62, 0x36, 0x37, 0x61, 0x6e, 0x71, 0x77, 0x70, 0x4f, 0x75, 0x38, 0x6e, 0x48, 0x6d, 0x57, 0x31, 0x50, 0x4c, 0x34, 0x45, 0x2b, 0x35, 0x65, 0x67, 0x56, 0x56, 0x4b, 0x41, 0x6a, 0x7a, 0x49, 0x57, 0x45, 0x73, 0x79, 0xa, 0x66, 0x47, 0x62, 0x4f, 0x37, 0x46, 0x31, 0x33, 0x34, 0x37, 0x4d, 0x4f, 0x5a, 0x78, 0x62, 0x36, 0x4e, 0x39, 0x4c, 0x35, 0x4b, 0x30, 0x74, 0x42, 0x44, 0x43, 0x6d, 0x69, 0x6a, 0x2f, 0x55, 0x51, 0x39, 0x67, 0x36, 0x64, 0x37, 0x31, 0x58, 0x5a, 0x51, 0x69, 0x69, 0x64, 0x54, 0x51, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0x6f, 0x30, 0x49, 0x77, 0x51, 0x44, 0x41, 0x4f, 0x42, 0x67, 0x4e, 0x56, 0xa, 0x48, 0x51, 0x38, 0x42, 0x41, 0x66, 0x38, 0x45, 0x42, 0x41, 0x4d, 0x43, 0x41, 0x67, 0x51, 0x77, 0x44, 0x77, 0x59, 0x44, 0x56, 0x52, 0x30, 0x54, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x55, 0x77, 0x41, 0x77, 0x45, 0x42, 0x2f, 0x7a, 0x41, 0x64, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x51, 0x34, 0x45, 0x46, 0x67, 0x51, 0x55, 0x73, 0x57, 0x50, 0x58, 0x54, 0x30, 0x73, 0x49, 0x71, 0x68, 0x75, 0x48, 0xa, 0x7a, 0x44, 0x4b, 0x43, 0x75, 0x43, 0x48, 0x48, 0x58, 0x49, 0x32, 0x59, 0x33, 0x4e, 0x55, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x47, 0x4c, 0x73, 0x69, 0x35, 0x46, 0x6f, 0x72, 0x51, 0x55, 0x4e, 0x2b, 0x77, 0x35, 0x54, 0x4b, 0x61, 0x41, 0x46, 0x4a, 0x75, 0x71, 0x50, 0xa, 0x42, 0x6a, 0x4a, 0x53, 0x6d, 0x5a, 0x73, 0x57, 0x65, 0x6a, 0x46, 0x74, 0x6a, 0x75, 0x5a, 0x6e, 0x5a, 0x51, 0x45, 0x67, 0x37, 0x6d, 0x48, 0x33, 0x74, 0x6a, 0x4d, 0x76, 0x44, 0x76, 0x56, 0x6d, 0x6c, 0x6a, 0x49, 0x61, 0x58, 0x6f, 0x6e, 0x48, 0x41, 0x42, 0x2f, 0x6e, 0x52, 0x47, 0x41, 0x59, 0x69, 0x67, 0x43, 0x6e, 0x47, 0x6e, 0x63, 0x72, 0x78, 0x53, 0x35, 0x77, 0x69, 0x70, 0x45, 0x5a, 0xa, 0x48, 0x2b, 0x69, 0x56, 0x48, 0x4e, 0x6c, 0x30, 0x4a, 0x4f, 0x50, 0x58, 0x70, 0x53, 0x5a, 0x42, 0x35, 0x6d, 0x43, 0x4e, 0x36, 0x77, 0x66, 0x49, 0x71, 0x53, 0x78, 0x52, 0x43, 0x50, 0x7a, 0x70, 0x4f, 0x6c, 0x67, 0x49, 0x76, 0x62, 0x74, 0x71, 0x52, 0x4a, 0x57, 0x74, 0x50, 0x6d, 0x41, 0x6a, 0x37, 0x50, 0x71, 0x6a, 0x6c, 0x75, 0x31, 0x79, 0x4a, 0x6b, 0x75, 0x4c, 0x73, 0x53, 0x62, 0x64, 0xa, 0x54, 0x67, 0x32, 0x32, 0x2f, 0x76, 0x51, 0x34, 0x76, 0x51, 0x51, 0x4e, 0x54, 0x45, 0x77, 0x54, 0x6e, 0x4c, 0x57, 0x74, 0x58, 0x34, 0x4b, 0x30, 0x57, 0x38, 0x52, 0x65, 0x33, 0x59, 0x6c, 0x33, 0x46, 0x70, 0x37, 0x35, 0x59, 0x71, 0x6a, 0x49, 0x62, 0x2f, 0x71, 0x52, 0x32, 0x43, 0x34, 0x78, 0x4f, 0x74, 0x39, 0x2b, 0x76, 0x6e, 0x72, 0x33, 0x47, 0x34, 0x36, 0x35, 0x59, 0x31, 0x33, 0x4d, 0xa, 0x69, 0x48, 0x76, 0x64, 0x4c, 0x6f, 0x51, 0x57, 0x33, 0x77, 0x30, 0x6d, 0x63, 0x59, 0x46, 0x52, 0x62, 0x78, 0x4c, 0x35, 0x33, 0x31, 0x38, 0x57, 0x61, 0x68, 0x49, 0x30, 0x38, 0x6d, 0x67, 0x74, 0x4d, 0x50, 0x72, 0x67, 0x44, 0x2b, 0x55, 0x59, 0x6e, 0x6a, 0x41, 0x57, 0x4d, 0x53, 0x62, 0x6a, 0x65, 0x30, 0x49, 0x6b, 0x4b, 0x79, 0x68, 0x44, 0x68, 0x36, 0x36, 0x72, 0x6b, 0x78, 0x33, 0x6c, 0xa, 0x48, 0x2f, 0x42, 0x66, 0x59, 0x6f, 0x4f, 0x73, 0x45, 0x47, 0x50, 0x6f, 0x77, 0x63, 0x45, 0x34, 0x65, 0x70, 0x78, 0x75, 0x4f, 0x6b, 0x6f, 0x4a, 0x62, 0x6e, 0x68, 0x33, 0x53, 0x33, 0x59, 0x48, 0x49, 0x33, 0x62, 0x59, 0x62, 0x6f, 0x4c, 0x74, 0x78, 0x62, 0x71, 0x53, 0x41, 0x74, 0x74, 0x34, 0x6e, 0x38, 0x74, 0x2f, 0x64, 0x53, 0x39, 0x73, 0x55, 0x7a, 0x38, 0x69, 0x38, 0x54, 0x30, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/02/05 09:09:07 [ApplyResourceChange][Request][PlannedState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "acme": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=4) {
             (string) (len=19) "privateKeySecretRef": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=1) {
                (string) (len=4) "name": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             },
             (string) (len=6) "server": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=7) "solvers": (cty.Type) {
              typeImpl: (cty.typeTuple) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               ElemTypes: ([]cty.Type) (len=1 cap=1) {
                (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=6) "http01": (cty.Type) {
                    typeImpl: (cty.typeObject) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     AttrTypes: (map[string]cty.Type) (len=1) {
                      (string) (len=7) "ingress": (cty.Type) {
                       typeImpl: (cty.typeObject) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        AttrTypes: (map[string]cty.Type) (len=1) {
                         (string) (len=5) "class": (cty.Type) {
                          typeImpl: (cty.primitiveType) {
                           typeImplSigil: (cty.typeImplSigil) {
                           },
                           Kind: (cty.primitiveTypeKind) 83
                          }
                         }
                        }
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                }
               }
              }
             },
             (string) (len=5) "email": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "acme": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=5) {
             (string) (len=19) "privateKeySecretRef": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=1) {
                (string) (len=4) "name": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             },
             (string) (len=6) "server": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=7) "solvers": (cty.Type) {
              typeImpl: (cty.typeTuple) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               ElemTypes: ([]cty.Type) (len=1 cap=1) {
                (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=6) "http01": (cty.Type) {
                    typeImpl: (cty.typeObject) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     AttrTypes: (map[string]cty.Type) (len=1) {
                      (string) (len=7) "ingress": (cty.Type) {
                       typeImpl: (cty.typeObject) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        AttrTypes: (map[string]cty.Type) (len=1) {
                         (string) (len=5) "class": (cty.Type) {
                          typeImpl: (cty.primitiveType) {
                           typeImplSigil: (cty.typeImplSigil) {
                           },
                           Kind: (cty.primitiveTypeKind) 83
                          }
                         }
                        }
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                }
               }
              }
             },
             (string) (len=5) "email": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=14) "preferredChain": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=4) "kind": (string) (len=13) "ClusterIssuer",
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=16) "letsencrypt-prod"
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=4) "acme": (map[string]interface {}) (len=5) {
     (string) (len=5) "email": (string) (len=27) "nicolas.lamirault@gmail.com",
     (string) (len=14) "preferredChain": (string) "",
     (string) (len=19) "privateKeySecretRef": (map[string]interface {}) (len=1) {
      (string) (len=4) "name": (string) (len=9) "acme-prod"
     },
     (string) (len=6) "server": (string) (len=46) "https://acme-v02.api.letsencrypt.org/directory",
     (string) (len=7) "solvers": ([]interface {}) (len=1 cap=1) {
      (map[string]interface {}) (len=1) {
       (string) (len=6) "http01": (map[string]interface {}) (len=1) {
        (string) (len=7) "ingress": (map[string]interface {}) (len=1) {
         (string) (len=5) "class": (string) (len=5) "nginx"
        }
       }
      }
     }
    }
   },
   (string) (len=10) "apiVersion": (string) (len=18) "cert-manager.io/v1"
  },
  (string) (len=8) "wait_for": (interface {}) <nil>,
  (string) (len=8) "manifest": (map[string]interface {}) (len=4) {
   (string) (len=10) "apiVersion": (string) (len=18) "cert-manager.io/v1",
   (string) (len=4) "kind": (string) (len=13) "ClusterIssuer",
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=16) "letsencrypt-prod"
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=4) "acme": (map[string]interface {}) (len=4) {
     (string) (len=19) "privateKeySecretRef": (map[string]interface {}) (len=1) {
      (string) (len=4) "name": (string) (len=9) "acme-prod"
     },
     (string) (len=6) "server": (string) (len=46) "https://acme-v02.api.letsencrypt.org/directory",
     (string) (len=7) "solvers": ([]interface {}) (len=1 cap=1) {
      (map[string]interface {}) (len=1) {
       (string) (len=6) "http01": (map[string]interface {}) (len=1) {
        (string) (len=7) "ingress": (map[string]interface {}) (len=1) {
         (string) (len=5) "class": (string) (len=5) "nginx"
        }
       }
      }
     },
     (string) (len=5) "email": (string) (len=27) "nicolas.lamirault@gmail.com"
    }
   }
  }
 }
}

RAW provider 2021/02/05 09:09:07 [ApplyResourceChange][Request][PriorState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (interface {}) <nil>
}

RAW provider 2021/02/05 09:09:07 [ApplyResourceChange][Request][PlannedPrivate]
([]uint8) <nil>

RAW provider 2021/02/05 09:09:07 [ApplyResourceChange][Create] API response:
(*unstructured.Unstructured)(0xc0000104e8)({
 Object: (map[string]interface {}) (len=4) {
  (string) (len=10) "apiVersion": (string) (len=18) "cert-manager.io/v1",
  (string) (len=4) "kind": (string) (len=13) "ClusterIssuer",
  (string) (len=8) "metadata": (map[string]interface {}) (len=7) {
   (string) (len=4) "name": (string) (len=16) "letsencrypt-prod",
   (string) (len=15) "resourceVersion": (string) (len=6) "360747",
   (string) (len=8) "selfLink": (string) (len=56) "/apis/cert-manager.io/v1/clusterissuers/letsencrypt-prod",
   (string) (len=3) "uid": (string) (len=36) "a2676a8f-9a12-472f-8142-443dfb8b73c2",
   (string) (len=17) "creationTimestamp": (string) (len=20) "2021-02-05T08:09:07Z",
   (string) (len=10) "generation": (int64) 1,
   (string) (len=13) "managedFields": ([]interface {}) (len=1 cap=1) {
    (map[string]interface {}) (len=6) {
     (string) (len=8) "fieldsV1": (map[string]interface {}) (len=1) {
      (string) (len=6) "f:spec": (map[string]interface {}) (len=1) {
       (string) (len=6) "f:acme": (map[string]interface {}) (len=5) {
        (string) (len=21) "f:privateKeySecretRef": (map[string]interface {}) (len=1) {
         (string) (len=6) "f:name": (map[string]interface {}) {
         }
        },
        (string) (len=8) "f:server": (map[string]interface {}) {
        },
        (string) (len=9) "f:solvers": (map[string]interface {}) {
        },
        (string) (len=7) "f:email": (map[string]interface {}) {
        },
        (string) (len=16) "f:preferredChain": (map[string]interface {}) {
        }
       }
      }
     },
     (string) (len=7) "manager": (string) (len=9) "Terraform",
     (string) (len=9) "operation": (string) (len=5) "Apply",
     (string) (len=4) "time": (string) (len=20) "2021-02-05T08:09:07Z",
     (string) (len=10) "apiVersion": (string) (len=18) "cert-manager.io/v1",
     (string) (len=10) "fieldsType": (string) (len=8) "FieldsV1"
    }
   }
  },
  (string) (len=4) "spec": (map[string]interface {}) (len=1) {
   (string) (len=4) "acme": (map[string]interface {}) (len=5) {
    (string) (len=5) "email": (string) (len=27) "nicolas.lamirault@gmail.com",
    (string) (len=14) "preferredChain": (string) "",
    (string) (len=19) "privateKeySecretRef": (map[string]interface {}) (len=1) {
     (string) (len=4) "name": (string) (len=9) "acme-prod"
    },
    (string) (len=6) "server": (string) (len=46) "https://acme-v02.api.letsencrypt.org/directory",
    (string) (len=7) "solvers": ([]interface {}) (len=1 cap=1) {
     (map[string]interface {}) (len=1) {
      (string) (len=6) "http01": (map[string]interface {}) (len=1) {
       (string) (len=7) "ingress": (map[string]interface {}) (len=1) {
        (string) (len=5) "class": (string) (len=5) "nginx"
       }
      }
     }
    }
   }
  }
 }
})

RAW provider 2021/02/05 09:09:07 [ApplyResourceChange][Create] transformed response:
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=4) {
    (string) (len=10) "apiVersion": (cty.Type) {
     typeImpl: (cty.primitiveType) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      Kind: (cty.primitiveTypeKind) 83
     }
    },
    (string) (len=4) "kind": (cty.Type) {
     typeImpl: (cty.primitiveType) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      Kind: (cty.primitiveTypeKind) 83
     }
    },
    (string) (len=8) "metadata": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=4) "name": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=4) "spec": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=4) "acme": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=5) {
          (string) (len=19) "privateKeySecretRef": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=4) "name": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          },
          (string) (len=6) "server": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=7) "solvers": (cty.Type) {
           typeImpl: (cty.typeTuple) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            ElemTypes: ([]cty.Type) (len=1 cap=1) {
             (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=1) {
                (string) (len=6) "http01": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=7) "ingress": (cty.Type) {
                    typeImpl: (cty.typeObject) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     AttrTypes: (map[string]cty.Type) (len=1) {
                      (string) (len=5) "class": (cty.Type) {
                       typeImpl: (cty.primitiveType) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        Kind: (cty.primitiveTypeKind) 83
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          },
          (string) (len=5) "email": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=14) "preferredChain": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=4) {
  (string) (len=10) "apiVersion": (string) (len=18) "cert-manager.io/v1",
  (string) (len=4) "kind": (string) (len=13) "ClusterIssuer",
  (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
   (string) (len=4) "name": (string) (len=16) "letsencrypt-prod"
  },
  (string) (len=4) "spec": (map[string]interface {}) (len=1) {
   (string) (len=4) "acme": (map[string]interface {}) (len=5) {
    (string) (len=6) "server": (string) (len=46) "https://acme-v02.api.letsencrypt.org/directory",
    (string) (len=7) "solvers": ([]interface {}) (len=1 cap=1) {
     (map[string]interface {}) (len=1) {
      (string) (len=6) "http01": (map[string]interface {}) (len=1) {
       (string) (len=7) "ingress": (map[string]interface {}) (len=1) {
        (string) (len=5) "class": (string) (len=5) "nginx"
       }
      }
     }
    },
    (string) (len=5) "email": (string) (len=27) "nicolas.lamirault@gmail.com",
    (string) (len=14) "preferredChain": (string) "",
    (string) (len=19) "privateKeySecretRef": (map[string]interface {}) (len=1) {
     (string) (len=4) "name": (string) (len=9) "acme-prod"
    }
   }
  }
 }
}

RAW provider 2021/02/05 09:09:07 [ApplyResourceChange][Create] transformed new state:
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "acme": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=4) {
             (string) (len=19) "privateKeySecretRef": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=1) {
                (string) (len=4) "name": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             },
             (string) (len=6) "server": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=7) "solvers": (cty.Type) {
              typeImpl: (cty.typeTuple) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               ElemTypes: ([]cty.Type) (len=1 cap=1) {
                (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=6) "http01": (cty.Type) {
                    typeImpl: (cty.typeObject) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     AttrTypes: (map[string]cty.Type) (len=1) {
                      (string) (len=7) "ingress": (cty.Type) {
                       typeImpl: (cty.typeObject) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        AttrTypes: (map[string]cty.Type) (len=1) {
                         (string) (len=5) "class": (cty.Type) {
                          typeImpl: (cty.primitiveType) {
                           typeImplSigil: (cty.typeImplSigil) {
                           },
                           Kind: (cty.primitiveTypeKind) 83
                          }
                         }
                        }
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                }
               }
              }
             },
             (string) (len=5) "email": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "acme": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=5) {
             (string) (len=6) "server": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=7) "solvers": (cty.Type) {
              typeImpl: (cty.typeTuple) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               ElemTypes: ([]cty.Type) (len=1 cap=1) {
                (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=6) "http01": (cty.Type) {
                    typeImpl: (cty.typeObject) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     AttrTypes: (map[string]cty.Type) (len=1) {
                      (string) (len=7) "ingress": (cty.Type) {
                       typeImpl: (cty.typeObject) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        AttrTypes: (map[string]cty.Type) (len=1) {
                         (string) (len=5) "class": (cty.Type) {
                          typeImpl: (cty.primitiveType) {
                           typeImplSigil: (cty.typeImplSigil) {
                           },
                           Kind: (cty.primitiveTypeKind) 83
                          }
                         }
                        }
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                }
               }
              }
             },
             (string) (len=5) "email": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=14) "preferredChain": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=19) "privateKeySecretRef": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=1) {
                (string) (len=4) "name": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "manifest": (map[string]interface {}) (len=4) {
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=4) "acme": (map[string]interface {}) (len=4) {
     (string) (len=5) "email": (string) (len=27) "nicolas.lamirault@gmail.com",
     (string) (len=19) "privateKeySecretRef": (map[string]interface {}) (len=1) {
      (string) (len=4) "name": (string) (len=9) "acme-prod"
     },
     (string) (len=6) "server": (string) (len=46) "https://acme-v02.api.letsencrypt.org/directory",
     (string) (len=7) "solvers": ([]interface {}) (len=1 cap=1) {
      (map[string]interface {}) (len=1) {
       (string) (len=6) "http01": (map[string]interface {}) (len=1) {
        (string) (len=7) "ingress": (map[string]interface {}) (len=1) {
         (string) (len=5) "class": (string) (len=5) "nginx"
        }
       }
      }
     }
    }
   },
   (string) (len=10) "apiVersion": (string) (len=18) "cert-manager.io/v1",
   (string) (len=4) "kind": (string) (len=13) "ClusterIssuer",
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=16) "letsencrypt-prod"
   }
  },
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=10) "apiVersion": (string) (len=18) "cert-manager.io/v1",
   (string) (len=4) "kind": (string) (len=13) "ClusterIssuer",
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=16) "letsencrypt-prod"
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=4) "acme": (map[string]interface {}) (len=5) {
     (string) (len=6) "server": (string) (len=46) "https://acme-v02.api.letsencrypt.org/directory",
     (string) (len=7) "solvers": ([]interface {}) (len=1 cap=1) {
      (map[string]interface {}) (len=1) {
       (string) (len=6) "http01": (map[string]interface {}) (len=1) {
        (string) (len=7) "ingress": (map[string]interface {}) (len=1) {
         (string) (len=5) "class": (string) (len=5) "nginx"
        }
       }
      }
     },
     (string) (len=5) "email": (string) (len=27) "nicolas.lamirault@gmail.com",
     (string) (len=14) "preferredChain": (string) "",
     (string) (len=19) "privateKeySecretRef": (map[string]interface {}) (len=1) {
      (string) (len=4) "name": (string) (len=9) "acme-prod"
     }
    }
   }
  },
  (string) (len=8) "wait_for": (interface {}) <nil>
 }
}
RAW provider 2021/02/05 09:09:07 Finished

---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://prometheus-community.github.io/helm-charts
      chart: kube-prometheus-stack
      version: 13.10.0
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
  releaseName: kube-prometheus-stack
  targetNamespace: monitoring
  test:
    enable: false # Enable helm test
  install:
    remediation: # perform remediation when helm install fails
      retries: 3
  upgrade:
    remediation: # perform remediation when helm upgrade fails
      retries: 3
      remediateLastFailure: true # remediate the last failure, when no retries remain
    cleanupOnFail: true
  rollback:
    timeout: 1m
    cleanupOnFail: true
  # Depends on having the sealed secret to un-encrypted required secrets.
  # dependsOn:
  #   - name: sealed-secrets
  #     namespace: flux-system
  timeout: 20m
  values:
    # commonLabels:
    #   app.kubernetes.io/manufacturer: portefaix
    defaultRules:
      runbookUrl: "https://github.com/nlamirault/portefaix/tree/master/runbook.md#"

    alertmanager:
      enabled: true
      serviceAccount:
        create: true
        name: alertmanager
      tplConfig: false
      ingress:
        enabled: false
      serviceMonitor:
        selfMonitor: true
      alertmanagerSpec:
        # image:
        #   repository: quay.io/prometheus/alertmanager
        #   tag: v0.21.0
        secrets: []    # /etc/alertmanager/secrets/
        configMaps: [] # /etc/alertmanager/configmaps/
        # storage:
        #   volumeClaimTemplate:
        #     spec:
        #       # storageClassName: gluster
        #       accessModes: ["ReadWriteOnce"]
        #       resources:
        #         requests:
        #           storage: 100Mi
        #     selector: {}
        resources:
          limits:
            cpu: 200m
            memory: 80Mi
          requests:
            cpu: 100m
            memory: 20Mi

    grafana:
      enabled: true
      defaultDashboardsEnabled: true

      # image:
      #   repository: grafana/grafana
      #   tag: 7.3.1
      ingress:
        enabled: false
      sidecar:
        dashboards:
          enabled: true
          searchNamespace: ALL
        datasources:
          enabled: true
          # Disabled due to thanos being set as the new default datasource instead of prometheus
          defaultDatasourceEnabled: false
      serviceMonitor:
        selfMonitor: true
      resources:
        limits:
          cpu: 300m
          memory: 600Mi
        requests:
          cpu: 100m
          memory: 300Mi
      plugins:
        - grafana-piechart-panel
        - grafana-worldmap-panel
        - grafana-clock-panel
        # - natel-discrete-panel
        # - pr0ps-trackmap-panel
        # - vonage-status-panel
        # - btplc-status-dot-panel
      dashboardProviders:
        dashboardproviders.yaml:
          apiVersion: 1
          providers:
            - name: 'default'
              orgId: 1
              folder: ''
              type: file
              disableDeletion: false
              editable: true
              options:
                path: /var/lib/grafana/dashboards/default
            - name: 'flux'
              orgId: 1
              folder: 'flux'
              type: file
              disableDeletion: false
              editable: true
              options:
                path: /var/lib/grafana/dashboards/flux
            - name: 'compute'
              orgId: 1
              folder: 'compute'
              type: file
              disableDeletion: false
              editable: true
              options:
                path: /var/lib/grafana/dashboards/compute
            - name: 'kubernetes'
              orgId: 1
              folder: 'kubernetes'
              type: file
              disableDeletion: false
              editable: true
              options:
                path: /var/lib/grafana/dashboards/kubernetes
            - name: 'monitoring'
              orgId: 1
              folder: 'monitoring'
              type: file
              disableDeletion: false
              editable: true
              options:
                path: /var/lib/grafana/dashboards/monitoring
            - name: 'logging'
              orgId: 1
              folder: 'logging'
              type: file
              disableDeletion: false
              editable: true
              options:
                path: /var/lib/grafana/dashboards/logging
            - name: 'tracing'
              orgId: 1
              folder: 'tracing'
              type: file
              disableDeletion: false
              editable: true
              options:
                path: /var/lib/grafana/dashboards/tracing
            - name: 'security'
              orgId: 1
              folder: 'security'
              type: file
              disableDeletion: false
              editable: true
              options:
                path: /var/lib/grafana/dashboards/security
            - name: 'storage'
              orgId: 1
              folder: 'storage'
              type: file
              disableDeletion: false
              editable: true
              options:
                path: /var/lib/grafana/dashboards/storage
      additionalDataSources:
        - name: Prometheus
          type: prometheus
          access: proxy
          url: http://kube-prometheus-stack-prometheus.monitoring.svc.cluster.local:9090/
          isDefault: false
        - name: Thanos
          type: prometheus
          access: proxy
          url: http://thanos-query.monitoring.svc.cluster.local:10902/
          isDefault: false
        - name: loki
          type: loki
          access: proxy
          url: http://loki.logging.svc.cluster.local:3100


      dashboards:
        default:
          # ================
          # Security / Sealed Secrets
          # sealed-secrets:
          #   url: https://raw.githubusercontent.com/bitnami-labs/sealed-secrets/v0.13.1/contrib/prometheus-mixin/dashboards/sealed-secrets-controller.json
          #   datasource: Prometheus
          # ================
          # Cert-Manager mixin
          cert-manager:
            url: https://gitlab.com/uneeq-oss/cert-manager-mixin/-/raw/master/dashboards/cert-manager.json
            datasource: Prometheus

        flux:
          # ================
          # Flux V2
          toolkit-cluster:
            url: https://raw.githubusercontent.com/fluxcd/flux2/v0.2.6/manifests/monitoring/grafana/dashboards/cluster.json
            datasource: Prometheus
          toolkit-control-plane:
            url: https://raw.githubusercontent.com/fluxcd/flux2/v0.2.6/manifests/monitoring/grafana/dashboards/control-plane.json
            datasource: Prometheus

        compute:
          # ================
          # Node Exporter
          node-exporter:
            url: https://grafana.com/api/dashboards/11074/revisions/9/download
            datasource: Prometheus

        kubernetes:
          # ================
          # Ingress Controller
          nginx-dashboard:
            url: https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.30.0/deploy/grafana/dashboards/nginx.json
            datasource: Prometheus
          nginx-perf:
            url: https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.30.0/deploy/grafana/dashboards/request-handling-performance.json
            datasource: Prometheus
          # ================
          # Kubernetes Mixin
          apiserver:
            url: https://raw.githubusercontent.com/monitoring-mixins/website/master/assets/kubernetes/dashboards/apiserver.json
            datasource: Prometheus
          cluster-total:
            url: https://raw.githubusercontent.com/monitoring-mixins/website/master/assets/kubernetes/dashboards/cluster-total.json
            datasource: Prometheus
          controller-manager:
            url: https://raw.githubusercontent.com/monitoring-mixins/website/master/assets/kubernetes/dashboards/controller-manager.json
            datasource: Prometheus
          k8s-resources-cluster:
            url: https://raw.githubusercontent.com/monitoring-mixins/website/master/assets/kubernetes/dashboards/k8s-resources-cluster.json
            datasource: Prometheus
          k8s-resources-namespace:
            url: https://raw.githubusercontent.com/monitoring-mixins/website/master/assets/kubernetes/dashboards/k8s-resources-namespace.json
            datasource: Prometheus
          k8s-resources-node:
            url: https://raw.githubusercontent.com/monitoring-mixins/website/master/assets/kubernetes/dashboards/k8s-resources-node.json
            datasource: Prometheus
          k8s-resources-pod:
            url: https://raw.githubusercontent.com/monitoring-mixins/website/master/assets/kubernetes/dashboards/k8s-resources-pod.json
            datasource: Prometheus
          k8s-resources-workload:
            url: https://raw.githubusercontent.com/monitoring-mixins/website/master/assets/kubernetes/dashboards/k8s-resources-workload.json
            datasource: Prometheus
          k8s-resources-workloads-namespace:
            url: https://raw.githubusercontent.com/monitoring-mixins/website/master/assets/kubernetes/dashboards/k8s-resources-workloads-namespace.json
            datasource: Prometheus
          kubelet:
            url: https://raw.githubusercontent.com/monitoring-mixins/website/master/assets/kubernetes/dashboards/kubelet.json
            datasource: Prometheus
          namespace-by-pod:
            url: https://raw.githubusercontent.com/monitoring-mixins/website/master/assets/kubernetes/dashboards/namespace-by-pod.json
            datasource: Prometheus
          namespace-by-workload:
            url: https://raw.githubusercontent.com/monitoring-mixins/website/master/assets/kubernetes/dashboards/namespace-by-workload.json
            datasource: Prometheus
          persistentvolumeusage:
            url: https://raw.githubusercontent.com/monitoring-mixins/website/master/assets/kubernetes/dashboards/persistentvolumesusage.json
            datasource: Prometheus
          pod-total:
            url: https://raw.githubusercontent.com/monitoring-mixins/website/master/assets/kubernetes/dashboards/pod-total.json
            datasource: Prometheus
          proxy:
            url: https://raw.githubusercontent.com/monitoring-mixins/website/master/assets/kubernetes/dashboards/proxy.json
            datasource: Prometheus
          scheduler:
            url: https://raw.githubusercontent.com/monitoring-mixins/website/master/assets/kubernetes/dashboards/scheduler.json
            datasource: Prometheus
          statefulset:
            url: https://raw.githubusercontent.com/monitoring-mixins/website/master/assets/kubernetes/dashboards/statefulset.json
            datasource: Prometheus
          workload-total:
            url: https://raw.githubusercontent.com/monitoring-mixins/website/master/assets/kubernetes/dashboards/workload-total.json
            datasource: Prometheus
          # ================
          # CoreDNS mixin

        monitoring:
          # ================
          # Thanos Mixin
          thanos-overview:
            url: https://raw.githubusercontent.com/thanos-io/thanos/v0.16.0/examples/dashboards/overview.json
            datasource: Prometheus
          thanos-compact:
            url: https://raw.githubusercontent.com/thanos-io/thanos/v0.16.0/examples/dashboards/compact.json
            datasource: Prometheus
          thanos-querier:
            url: https://raw.githubusercontent.com/thanos-io/thanos/v0.16.0/examples/dashboards/query.json
            datasource: Prometheus
          thanos-store:
            url: https://raw.githubusercontent.com/thanos-io/thanos/v0.16.0/examples/dashboards/store.json
            datasource: Prometheus
          thanos-receiver:
            url: https://raw.githubusercontent.com/thanos-io/thanos/v0.16.0/examples/dashboards/receive.json
            datasource: Prometheus
          thanos-sidecar:
            url: https://raw.githubusercontent.com/thanos-io/thanos/v0.16.0/examples/dashboards/sidecar.json
            datasource: Prometheus
          thanos-ruler:
            url: https://raw.githubusercontent.com/thanos-io/thanos/v0.16.0/examples/dashboards/rule.json
            datasource: Prometheus
          thanos-replicate:
            url: https://raw.githubusercontent.com/thanos-io/thanos/v0.16.0/examples/dashboards/bucket_replicate.json
            datasource: Prometheus

        logging:
          # ================
          # Fluent-Bit
          fluent-bit-overview:
            url: https://raw.githubusercontent.com/fluent/fluent-bit-docs/1.6/monitoring/dashboard.json
            datasource: Prometheus
          # ================
          # Loki
          loki-dashboard-errors:
            url: https://grafana.com/api/dashboards/12611/revisions/1/download
            datasource: Prometheus
          loki-global:
            url: https://grafana.com/api/dashboards/13407/revisions/1/download
            datasource: Prometheus

          # ================
          # Open Service Mesh
          osm-control-plane:
            url: https://raw.githubusercontent.com/openservicemesh/osm/v0.5.0/charts/osm/grafana/dashboards/osm-control-plane.json
            datasource: Prometheus
          osm-mesh-envoy-details:
            url: https://raw.githubusercontent.com/openservicemesh/osm/v0.5.0/charts/osm/grafana/dashboards/osm-mesh-envoy-details.json
            datasource: Prometheus
          osm-pod:
            url: https://raw.githubusercontent.com/openservicemesh/osm/v0.5.0/charts/osm/grafana/dashboards/osm-pod.json
            datasource: Prometheus
          osm-service-to-service:
            url: https://raw.githubusercontent.com/openservicemesh/osm/v0.5.0/charts/osm/grafana/dashboards/osm-service-to-service.json
            datasource: Prometheus
          osm-workload:
            url: https://raw.githubusercontent.com/openservicemesh/osm/v0.5.0/charts/osm/grafana/dashboards/osm-workload.json
            datasource: Prometheus

          # ================
          # Istio
          # istio-mesh:
          #   url: https://grafana.com/api/dashboards/7639/revisions/22/download
          #   datasource: Prometheus
          # istio-service:
          #   url: https://grafana.com/api/dashboards/7636/revisions/22/download
          #   datasource: Prometheus
          # istio-workload:
          #   url: https://grafana.com/api/dashboards/7630/revisions/22/download
          #   datasource: Prometheus
          # istio-performence:
          #   url: https://grafana.com/api/dashboards/11829/revisions/22/download
          #   datasource: Prometheus
          # istio-control-plane:
          #   url: https://grafana.com/api/dashboards/7645/revisions/22/download
          #   datasource: Prometheus

        security:
          # ================
          # Falco
          falco-dashboard:
            url: https://raw.githubusercontent.com/falcosecurity/falco-exporter/v0.4.1/grafana/dashboard.json
            datasource: Prometheus

        storage:
          # ================
          # Storage / Ceph
          # ceph-cluster:
          #   url: https://grafana.com/api/dashboards/2842/revisions/11/download
          #   datasource: Prometheus
          # ceph-osd:
          #   url: https://grafana.com/api/dashboards/5336/revisions/3/download
          #   datasource: Prometheus
          # ceph-pools:
          #   url: https://grafana.com/api/dashboards/5342/revisions/3/download
          #   datasource: Prometheus

          # ================
          # Storage / OpenEBS
          # openebs:
          #   url: https://grafana.com/api/dashboards/12171/revisions/1/download
          #   datasource: Prometheus
          # openebs-pg-dashboard:
          #   url: https://raw.githubusercontent.com/openebs/openebs/master/k8s/openebs-pg-dashboard.json
          #   datasource: Prometheus

          # ================
          # Storage / Velero
          velero:
            url: https://grafana.com/api/dashboards/11055/revisions/2/download
            datasource: Prometheus

          # ================
          # Misc
          # speedtest:
          #   url: https://raw.githubusercontent.com/billimek/k8s-gitops/master/monitoring/prometheus-operator/grafana-dashboards/internet_speed.json
          #   datasource: Prometheus

      # Administrator credentials when not using an existing secret (see below)
      adminUser: admin
      adminPassword: portefaix
      # Unused because disable_login_form=true however, used for backup authentication
      # admin:
      #   existingSecret: 'grafana-admin-creds'
      #   userKey: admin-user
      #   passwordKey: admin-password

      # extraSecretMounts:
      #   - name: auth-github-oauth-secret-mount
      #     secretName: auth-github-oauth-secret
      #     defaultMode: 0440
      #     mountPath: /etc/secrets/auth_github_oauth
      #     readOnly: true
      #   - name: auth-generic-oauth-secret-mount
      #     secretName: auth-generic-oauth-secret
      #     defaultMode: 0440
      #     mountPath: /etc/secrets/auth_generic_oauth
      #     readOnly: true
      ## grafana Authentication can be enabled with the following values on grafana.ini
      # The full public facing url you use in browser, used for redirects and emails
      # https://grafana.com/docs/grafana/latest/auth/github/#enable-github-in-grafana
      # Note: auth.github.enabled=false until chart supports existingSecret functionality.
      # https://github.com/helm/charts/issues/22473
      grafana.ini:
        auth.basic:
          disable_login_form: false


    prometheusOperator:
      enabled: true
      serviceAccount:
        create: true
        name: prometheus-operator
      serviceMonitor:
        selfMonitor: true
      resources:
        limits:
          cpu: 150m
          memory: 200Mi
        requests:
          cpu: 50m
          memory: 50Mi
      # image:
      #   repository: quay.io/prometheus-operator/prometheus-operator
      #   tag: v0.43.1
      tls:
        enabled: false
      ## Admission webhook support for PrometheusRules resources added in Prometheus Operator 0.30 can be enabled to prevent incorrectly formatted
      ## rules from making their way into prometheus and potentially preventing the container from starting
      admissionWebhooks:
        enabled: false

    prometheus:
      enabled: true
      serviceAccount:
        create: true
        name: prometheus
      ingress:
        enabled: false
      serviceMonitor:
        selfMonitor: true
      prometheusSpec:
        # image:
        #   repository: quay.io/prometheus/prometheus
        #   tag: v2.22.1
        retention: 7d
        resources:
          requests:
            memory: 500Mi
            cpu: 300m
          limits:
            memory: 1Gi
            cpu: 800m
        storageSpec:
          volumeClaimTemplate:
            spec:
              # storageClassName: ""
              resources:
                requests:
                  storage: 10Gi
        additionalScrapeConfigs: []
        thanos:
          # image: quay.io/thanos/thanos:v0.16.0
          # Thanos chart will generate the secret: thanos-objstore-config
          objectStorageConfig:
            name: thanos-objstore-config
            key: object-store.yaml

    kubeApiServer:
      enabled: true

    kubelet:
      enabled: true

    kubeControllerManager:
      enabled: true

    coreDns:
      enabled: true

    kubeDns:
      enabled: false

    kubeEtcd:
      enabled: true

    kubeScheduler:
      enabled: true

    kubeProxy:
      enabled: true

    kubeStateMetrics:
      enabled: true

    nodeExporter:
      enabled: true

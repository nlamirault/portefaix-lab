# Copyright (C) 2021 Nicolas Lamirault <nicolas.lamirault@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: consul
  namespace: consul
spec:
  values:
    global:
      domain: consul
      # The name of the datacenter that the agents should
      # register as. This can't be changed once the Consul cluster is up and running
      # since Consul doesn't support an automatic way to change this value currently:
      # https://github.com/hashicorp/consul/issues/1858.
      datacenter: homelab

      consulSidecarContainer:
        resources:
          requests:
            memory: "25Mi"
            cpu: "10m"
          limits:
            memory: "50Mi"
            cpu: "30m"

    # Server, when enabled, configures a server cluster to run. This should
    # be disabled if you plan on connecting to a Consul cluster external to
    # the Kube cluster.
    server:
      replicas: 1
      storage: 100Mi
      storageClass: nfs-client
      resources:
        requests:
          memory: "50Mi"
          cpu: "30m"
        limits:
          memory: "100Mi"
          cpu: "60m"

    # Values that configure running a Consul client on Kubernetes nodes.
    client:
      resources:
        requests:
          memory: "50Mi"
          cpu: "200m"
        limits:
          memory: "100Mi"
          cpu: "60m"

    connectInject:
      enabled: true
      # inject an envoy sidecar into every new pod,
      # except for those with annotations that prevent injection
      default: true

    # enable CRDs
    controller:
      enabled: true













    # # Values that configure the Consul UI.
    # ui:
    #   service:
    #     type: ClusterIP
    #   # Configure Ingress for the Consul UI.
    #   # If `global.tls.enabled` is set to `true`, the Ingress will expose
    #   # the port 443 on the UI service. Please ensure the Ingress Controller
    #   # supports SSL pass-through and it is enabled to ensure traffic forwarded
    #   # to port 443 has not been TLS terminated.
    #   ingress:
    #     enabled: true
    #     hosts:
    #       - host: consul.192.168.1.114.nip.io
    #         paths:
    #           - /
    #     tls: []
    #     annotations: |
    #       kubernetes.io/ingress.class: nginx
    #       nginx.ingress.kubernetes.io/auth-url: "http://oauth2-proxy.identity.svc.cluster.local/oauth2/auth"
    #       nginx.ingress.kubernetes.io/auth-signin: "http://auth.192.168.1.114.nip.io/oauth2/sign_in?rd=http://$host$request_uri"
    #   # Configurations for displaying metrics in the UI.
    #   metrics:
    #     provider: "prometheus"
    #     baseURL: http://kube-prometheus-stack-prometheus.monitoring.svc.cluster.local:9090/

    # # Configure the catalog sync process to sync K8S with Consul
    # # services. This can run bidirectional (default) or unidirectionally (Consul
    # # to K8S or K8S to Consul only).
    # #
    # # This process assumes that a Consul agent is available on the host IP.
    # # This is done automatically if clients are enabled. If clients are not
    # # enabled then set the node selection so that it chooses a node with a
    # # Consul agent.
    # syncCatalog:
    #   # True if you want to enable the catalog sync. Set to "-" to inherit from
    #   # global.enabled.
    #   enabled: false

    #   # The name of the Docker image (including any tag) for consul-k8s
    #   # to run the sync program.
    #   # @type: string
    #   image: null

    #   # If true, all valid services in K8S are
    #   # synced by default. If false, the service must be annotated
    #   # (https://consul.io/docs/k8s/service-sync#sync-enable-disable) properly to sync.
    #   # In either case an annotation can override the default.
    #   default: true

    #   # Optional priorityClassName.
    #   priorityClassName: ""

    #   # If true, will sync Kubernetes services to Consul. This can be disabled to
    #   # have a one-way sync.
    #   toConsul: true

    #   # If true, will sync Consul services to Kubernetes. This can be disabled to
    #   # have a one-way sync.
    #   toK8S: true

    #   # Service prefix to prepend to services before registering
    #   # with Kubernetes. For example "consul-" will register all services
    #   # prepended with "consul-". (Consul -> Kubernetes sync)
    #   # @type: string
    #   k8sPrefix: null

    #   # List of k8s namespaces to sync the k8s services from.
    #   # If a k8s namespace is not included in this list or is listed in `k8sDenyNamespaces`,
    #   # services in that k8s namespace will not be synced even if they are explicitly
    #   # annotated. Use `["*"]` to automatically allow all k8s namespaces.
    #   #
    #   # For example, `["namespace1", "namespace2"]` will only allow services in the k8s
    #   # namespaces `namespace1` and `namespace2` to be synced and registered
    #   # with Consul. All other k8s namespaces will be ignored.
    #   #
    #   # To deny all namespaces, set this to `[]`.
    #   #
    #   # Note: `k8sDenyNamespaces` takes precedence over values defined here.
    #   # Requires consul-k8s v0.12+
    #   # @type: array<string>
    #   k8sAllowNamespaces: ["*"]

    #   # List of k8s namespaces that should not have their
    #   # services synced. This list takes precedence over `k8sAllowNamespaces`.
    #   # `*` is not supported because then nothing would be allowed to sync.
    #   # Requires consul-k8s v0.12+.
    #   #
    #   # For example, if `k8sAllowNamespaces` is `["*"]` and `k8sDenyNamespaces` is
    #   # `["namespace1", "namespace2"]`, then all k8s namespaces besides `namespace1`
    #   # and `namespace2` will be synced.
    #   # @type: array<string>
    #   k8sDenyNamespaces: ["kube-system", "kube-public"]

    #   # [DEPRECATED] Use k8sAllowNamespaces and k8sDenyNamespaces instead. For
    #   # backwards compatibility, if both this and the allow/deny lists are set,
    #   # the allow/deny lists will be ignored.
    #   # k8sSourceNamespace is the Kubernetes namespace to watch for service
    #   # changes and sync to Consul. If this is not set then it will default
    #   # to all namespaces.
    #   # @type: string
    #   k8sSourceNamespace: null

    #   # [Enterprise Only] These settings manage the catalog sync's interaction with
    #   # Consul namespaces (requires consul-ent v1.7+ and consul-k8s v0.12+).
    #   # Also, `global.enableConsulNamespaces` must be true.
    #   consulNamespaces:
    #     # Name of the Consul namespace to register all
    #     # k8s services into. If the Consul namespace does not already exist,
    #     # it will be created. This will be ignored if `mirroringK8S` is true.
    #     consulDestinationNamespace: "default"

    #     # If true, k8s services will be registered into a Consul namespace
    #     # of the same name as their k8s namespace, optionally prefixed if
    #     # `mirroringK8SPrefix` is set below. If the Consul namespace does not
    #     # already exist, it will be created. Turning this on overrides the
    #     # `consulDestinationNamespace` setting.
    #     # `addK8SNamespaceSuffix` may no longer be needed if enabling this option.
    #     mirroringK8S: false

    #     # If `mirroringK8S` is set to true, `mirroringK8SPrefix` allows each Consul namespace
    #     # to be given a prefix. For example, if `mirroringK8SPrefix` is set to "k8s-", a
    #     # service in the k8s `staging` namespace will be registered into the
    #     # `k8s-staging` Consul namespace.
    #     mirroringK8SPrefix: ""

    #   # Appends Kubernetes namespace suffix to
    #   # each service name synced to Consul, separated by a dash.
    #   # For example, for a service 'foo' in the default namespace,
    #   # the sync process will create a Consul service named 'foo-default'.
    #   # Set this flag to true to avoid registering services with the same name
    #   # but in different namespaces as instances for the same Consul service.
    #   # Namespace suffix is not added if 'annotationServiceName' is provided.
    #   addK8SNamespaceSuffix: true

    #   # Service prefix which prepends itself
    #   # to Kubernetes services registered within Consul
    #   # For example, "k8s-" will register all services prepended with "k8s-".
    #   # (Kubernetes -> Consul sync)
    #   # consulPrefix is ignored when 'annotationServiceName' is provided.
    #   # NOTE: Updating this property to a non-null value for an existing installation will result in deregistering
    #   # of existing services in Consul and registering them with a new name.
    #   # @type: string
    #   consulPrefix: null

    #   # Optional tag that is applied to all of the Kubernetes services
    #   # that are synced into Consul. If nothing is set, defaults to "k8s".
    #   # (Kubernetes -> Consul sync)
    #   # @type: string
    #   k8sTag: null

    #   # Defines the Consul synthetic node that all services
    #   # will be registered to.
    #   # NOTE: Changing the node name and upgrading the Helm chart will leave
    #   # all of the previously sync'd services registered with Consul and
    #   # register them again under the new Consul node name. The out-of-date
    #   # registrations will need to be explicitly removed.
    #   consulNodeName: "k8s-sync"

    #   # Syncs services of the ClusterIP type, which may
    #   # or may not be broadly accessible depending on your Kubernetes cluster.
    #   # Set this to false to skip syncing ClusterIP services.
    #   syncClusterIPServices: true

    #   # Configures the type of syncing that happens for NodePort
    #   # services. The valid options are: ExternalOnly, InternalOnly, ExternalFirst.
    #   #
    #   # - ExternalOnly will only use a node's ExternalIP address for the sync
    #   # - InternalOnly use's the node's InternalIP address
    #   # - ExternalFirst will preferentially use the node's ExternalIP address, but
    #   #   if it doesn't exist, it will use the node's InternalIP address instead.
    #   nodePortSyncType: ExternalFirst

    #   # Refers to a Kubernetes secret that you have created that contains
    #   # an ACL token for your Consul cluster which allows the sync process the correct
    #   # permissions. This is only needed if ACLs are enabled on the Consul cluster.
    #   aclSyncToken:
    #     # The name of the Kubernetes secret.
    #     secretName: null
    #     # The key of the Kubernetes secret.
    #     secretKey: null

    #   # This value defines `nodeSelector` (https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector)
    #   # labels for catalog sync pod assignment, formatted as a multi-line string.
    #   #
    #   # Example:
    #   #
    #   # ```yaml
    #   # nodeSelector: |
    #   #   beta.kubernetes.io/arch: amd64
    #   # ```
    #   #
    #   # @type: string
    #   nodeSelector: null

    #   # Affinity Settings
    #   # This should be a multi-line string matching the affinity object
    #   # @type: string
    #   affinity: null

    #   # Toleration Settings
    #   # This should be a multi-line string matching the Toleration array
    #   # in a PodSpec.
    #   # @type: string
    #   tolerations: null

    #   serviceAccount:
    #     # This value defines additional annotations for the mesh gateways' service account. This should be formatted as a
    #     # multi-line string.
    #     #
    #     # ```yaml
    #     # annotations: |
    #     #   "sample/annotation1": "foo"
    #     #   "sample/annotation2": "bar"
    #     # ```
    #     #
    #     # @type: string
    #     annotations: null

    #   # Resource settings for sync catalog pods.
    #   # @recurse: false
    #   # @type: map
    #   resources:
    #     requests:
    #       memory: "50Mi"
    #       cpu: "50m"
    #     limits:
    #       memory: "50Mi"
    #       cpu: "50m"

    #   # Log verbosity level. One of "trace", "debug", "info", "warn", or "error".
    #   logLevel: info

    #   # Override the default interval to perform syncing operations creating Consul services.
    #   # @type: string
    #   consulWriteInterval: null

    #   # Extra labels to attach to the sync catalog pods. This should be a YAML map.
    #   #
    #   # Example:
    #   #
    #   # ```yaml
    #   # extraLabels:
    #   #   labelKey: label-value
    #   #   anotherLabelKey: another-label-value
    #   # ```
    #   #
    #   # @type: map
    #   extraLabels: null

    # # Configures the automatic Connect sidecar injector.
    # connectInject:
    #   # True if you want to enable connect injection. Set to "-" to inherit from
    #   # global.enabled.
    #   enabled: false

    #   # Image for consul-k8s that contains the injector
    #   # @type: string
    #   image: null

    #   # If true, the injector will inject the
    #   # Connect sidecar into all pods by default. Otherwise, pods must specify the
    #   # injection annotation (https://consul.io/docs/k8s/connect#consul-hashicorp-com-connect-inject)
    #   # to opt-in to Connect injection. If this is true, pods can use the same annotation
    #   # to explicitly opt-out of injection.
    #   default: false

    #   # Configures Transparent Proxy for Consul Service mesh services.
    #   # Using this feature requires Consul 1.10.0-beta1+ and consul-k8s 0.26.0-beta1+.
    #   transparentProxy:
    #     # If true, then all Consul Service mesh will run with transparent proxy enabled by default,
    #     # i.e. we enforce that all traffic within the pod will go through the proxy.
    #     # This value is overridable via the "consul.hashicorp.com/transparent-proxy" pod annotation.
    #     defaultEnabled: true

    #     # If true, we will overwrite Kubernetes HTTP probes of the pod to point to the Envoy proxy instead.
    #     # This setting is recommended because with traffic being enforced to go through the Envoy proxy,
    #     # the probes on the pod will fail because kube-proxy doesn't have the right certificates
    #     # to talk to Envoy.
    #     # This value is also overridable via the "consul.hashicorp.com/transparent-proxy-overwrite-probes" annotation.
    #     # Note: This value has no effect if transparent proxy is disabled on the pod.
    #     defaultOverwriteProbes: true

    #   # Configures metrics for Consul Connect services. All values are overridable
    #   # via annotations on a per-pod basis.
    #   metrics:
    #     # If true, the connect-injector will automatically
    #     # add prometheus annotations to connect-injected pods. It will also
    #     # add a listener on the Envoy sidecar to expose metrics. The exposed
    #     # metrics will depend on whether metrics merging is enabled:
    #     #   - If metrics merging is enabled:
    #     #     the Consul sidecar will run a merged metrics server
    #     #     combining Envoy sidecar and Connect service metrics,
    #     #     i.e. if your service exposes its own Prometheus metrics.
    #     #   - If metrics merging is disabled:
    #     #     the listener will just expose Envoy sidecar metrics.
    #     # This will inherit from `global.metrics.enabled`.
    #     defaultEnabled: "-"
    #     # Configures the Consul sidecar to run a merged metrics server
    #     # to combine and serve both Envoy and Connect service metrics.
    #     # This feature is available only in Consul v1.10-alpha or greater.
    #     defaultEnableMerging: false
    #     # Configures the port at which the Consul sidecar will listen on to return
    #     # combined metrics. This port only needs to be changed if it conflicts with
    #     # the application's ports.
    #     defaultMergedMetricsPort: 20100
    #     # Configures the port Prometheus will scrape metrics from, by configuring
    #     # the Pod annotation `prometheus.io/port` and the corresponding listener in
    #     # the Envoy sidecar.
    #     # NOTE: This is *not* the port that your application exposes metrics on.
    #     # That can be configured with the
    #     # `consul.hashicorp.com/service-metrics-port` annotation.
    #     defaultPrometheusScrapePort: 20200
    #     # Configures the path Prometheus will scrape metrics from, by configuring the pod
    #     # annotation `prometheus.io/path` and the corresponding handler in the Envoy
    #     # sidecar.
    #     # NOTE: This is *not* the path that your application exposes metrics on.
    #     # That can be configured with the
    #     # `consul.hashicorp.com/service-metrics-path` annotation.
    #     defaultPrometheusScrapePath: "/metrics"

    #   # Used to pass arguments to the injected envoy sidecar.
    #   # Valid arguments to pass to envoy can be found here: https://www.envoyproxy.io/docs/envoy/latest/operations/cli
    #   # e.g "--log-level debug --disable-hot-restart"
    #   # @type: string
    #   envoyExtraArgs: null

    #   # Optional priorityClassName.
    #   priorityClassName: ""

    #   # The Docker image for Consul to use when performing Connect injection.
    #   # Defaults to global.image.
    #   # @type: string
    #   imageConsul: null

    #   # Log verbosity level. One of "debug", "info", "warn", or "error".
    #   logLevel: info

    #   serviceAccount:
    #     # This value defines additional annotations for the injector service account. This should be formatted as a
    #     # multi-line string.
    #     #
    #     # ```yaml
    #     # annotations: |
    #     #   "sample/annotation1": "foo"
    #     #   "sample/annotation2": "bar"
    #     # ```
    #     #
    #     # @type: string
    #     annotations: null

    #   # Resource settings for connect inject pods.
    #   # @recurse: false
    #   # @type: map
    #   resources:
    #     requests:
    #       memory: "50Mi"
    #       cpu: "50m"
    #     limits:
    #       memory: "50Mi"
    #       cpu: "50m"

    #   # Selector for restricting the webhook to only
    #   # specific namespaces. This should be set to a multiline string.
    #   # See https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#matching-requests-namespaceselector
    #   # for more details.
    #   #
    #   # Example:
    #   #
    #   # ```yaml
    #   # namespaceSelector: |
    #   #   matchLabels:
    #   #     namespace-label: label-value
    #   # ```
    #   # @type: string
    #   namespaceSelector: null

    #   # List of k8s namespaces to allow Connect sidecar
    #   # injection in. If a k8s namespace is not included or is listed in `k8sDenyNamespaces`,
    #   # pods in that k8s namespace will not be injected even if they are explicitly
    #   # annotated. Use `["*"]` to automatically allow all k8s namespaces.
    #   #
    #   # For example, `["namespace1", "namespace2"]` will only allow pods in the k8s
    #   # namespaces `namespace1` and `namespace2` to have Connect sidecars injected
    #   # and registered with Consul. All other k8s namespaces will be ignored.
    #   #
    #   # To deny all namespaces, set this to `[]`.
    #   #
    #   # Note: `k8sDenyNamespaces` takes precedence over values defined here and
    #   # `namespaceSelector` takes precedence over both since it is applied first.
    #   # `kube-system` and `kube-public` are never injected, even if included here.
    #   # Requires consul-k8s v0.12+
    #   # @type: array<string>
    #   k8sAllowNamespaces: ["*"]

    #   # List of k8s namespaces that should not allow Connect
    #   # sidecar injection. This list takes precedence over `k8sAllowNamespaces`.
    #   # `*` is not supported because then nothing would be allowed to be injected.
    #   #
    #   # For example, if `k8sAllowNamespaces` is `["*"]` and k8sDenyNamespaces is
    #   # `["namespace1", "namespace2"]`, then all k8s namespaces besides "namespace1"
    #   # and "namespace2" will be available for injection.
    #   #
    #   # Note: `namespaceSelector` takes precedence over this since it is applied first.
    #   # `kube-system` and `kube-public` are never injected.
    #   # Requires consul-k8s v0.12+.
    #   # @type: array<string>
    #   k8sDenyNamespaces: []

    #   # [Enterprise Only] These settings manage the connect injector's interaction with
    #   # Consul namespaces (requires consul-ent v1.7+ and consul-k8s v0.12+).
    #   # Also, `global.enableConsulNamespaces` must be true.
    #   consulNamespaces:
    #     # Name of the Consul namespace to register all
    #     # k8s pods into. If the Consul namespace does not already exist,
    #     # it will be created. This will be ignored if `mirroringK8S` is true.
    #     consulDestinationNamespace: "default"

    #     # Causes k8s pods to be registered into a Consul namespace
    #     # of the same name as their k8s namespace, optionally prefixed if
    #     # `mirroringK8SPrefix` is set below. If the Consul namespace does not
    #     # already exist, it will be created. Turning this on overrides the
    #     # `consulDestinationNamespace` setting.
    #     mirroringK8S: false

    #     # If `mirroringK8S` is set to true, `mirroringK8SPrefix` allows each Consul namespace
    #     # to be given a prefix. For example, if `mirroringK8SPrefix` is set to "k8s-", a
    #     # pod in the k8s `staging` namespace will be registered into the
    #     # `k8s-staging` Consul namespace.
    #     mirroringK8SPrefix: ""

    #   # Selector labels for connectInject pod assignment, formatted as a multi-line string.
    #   # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
    #   #
    #   # Example:
    #   #
    #   # ```yaml
    #   # nodeSelector: |
    #   #   beta.kubernetes.io/arch: amd64
    #   # ```
    #   # @type: string
    #   nodeSelector: null

    #   # Affinity Settings
    #   # This should be a multi-line string matching the affinity object
    #   # @type: string
    #   affinity: null

    #   # Toleration Settings
    #   # This should be a multi-line string matching the Toleration array
    #   # in a PodSpec.
    #   # @type: string
    #   tolerations: null

    #   # Query that defines which Service Accounts
    #   # can authenticate to Consul and receive an ACL token during Connect injection.
    #   # The default setting, i.e. serviceaccount.name!=default, prevents the
    #   # 'default' Service Account from logging in.
    #   # If set to an empty string all service accounts can log in.
    #   # This only has effect if ACLs are enabled.
    #   #
    #   # See https://www.consul.io/docs/acl/acl-auth-methods.html#binding-rules
    #   # and https://www.consul.io/docs/acl/auth-methods/kubernetes.html#trusted-identity-attributes
    #   # for more details.
    #   # Requires Consul >= v1.5 and consul-k8s >= v0.8.0.
    #   aclBindingRuleSelector: "serviceaccount.name!=default"

    #   # If you are not using global.acls.manageSystemACLs and instead manually setting up an
    #   # auth method for Connect inject, set this to the name of your auth method.
    #   overrideAuthMethodName: ""

    #   # Refers to a Kubernetes secret that you have created that contains
    #   # an ACL token for your Consul cluster which allows the Connect injector the correct
    #   # permissions. This is only needed if Consul namespaces [Enterprise Only] and ACLs
    #   # are enabled on the Consul cluster and you are not setting
    #   # `global.acls.manageSystemACLs` to `true`.
    #   # This token needs to have `operator = "write"` privileges to be able to
    #   # create Consul namespaces.
    #   aclInjectToken:
    #     # The name of the Kubernetes secret.
    #     # @type: string
    #     secretName: null
    #     # The key of the Kubernetes secret.
    #     # @type: string
    #     secretKey: null

    #   sidecarProxy:
    #     # Set default resources for sidecar proxy. If null, that resource won't
    #     # be set.
    #     # These settings can be overridden on a per-pod basis via these annotations:
    #     #
    #     # - `consul.hashicorp.com/sidecar-proxy-cpu-limit`
    #     # - `consul.hashicorp.com/sidecar-proxy-cpu-request`
    #     # - `consul.hashicorp.com/sidecar-proxy-memory-limit`
    #     # - `consul.hashicorp.com/sidecar-proxy-memory-request`
    #     # @type: map
    #     resources:
    #       requests:
    #         # Recommended default: 100Mi
    #         # @type: string
    #         memory: null
    #         # Recommended default: 100m
    #         # @type: string
    #         cpu: null
    #       limits:
    #         # Recommended default: 100Mi
    #         # @type: string
    #         memory: null
    #         # Recommended default: 100m
    #         # @type: string
    #         cpu: null

    #   # Resource settings for the Connect injected init container.
    #   # @recurse: false
    #   # @type: map
    #   initContainer:
    #     resources:
    #       requests:
    #         memory: "25Mi"
    #         cpu: "50m"
    #       limits:
    #         memory: "150Mi"
    #         cpu: "50m"

    # # Controller handles config entry custom resources.
    # # Requires consul >= 1.8.4.
    # # ServiceIntentions require consul 1.9+.
    # controller:
    #   # Enables the controller for managing custom resources.
    #   enabled: false

    #   # The number of deployment replicas.
    #   replicas: 1

    #   # Log verbosity level. One of "debug", "info", "warn", or "error".
    #   logLevel: info

    #   serviceAccount:
    #     # This value defines additional annotations for the controller service account. This should be formatted as a
    #     # multi-line string.
    #     #
    #     # ```yaml
    #     # annotations: |
    #     #   "sample/annotation1": "foo"
    #     #   "sample/annotation2": "bar"
    #     # ```
    #     #
    #     # @type: string
    #     annotations: null

    #   # Resource settings for controller pods.
    #   # @recurse: false
    #   # @type: map
    #   resources:
    #     limits:
    #       cpu: 100m
    #       memory: 50Mi
    #     requests:
    #       cpu: 100m
    #       memory: 50Mi

    #   # Optional YAML string to specify a nodeSelector config.
    #   # @type: string
    #   nodeSelector: null

    #   # Optional YAML string to specify tolerations.
    #   # @type: string
    #   tolerations: null

    #   # Affinity Settings
    #   # This should be a multi-line string matching the affinity object
    #   # @type: string
    #   affinity: null

    #   # Optional priorityClassName.
    #   priorityClassName: ""

    #   # Refers to a Kubernetes secret that you have created that contains
    #   # an ACL token for your Consul cluster which grants the controller process the correct
    #   # permissions. This is only needed if you are managing ACLs yourself (i.e. not using
    #   # `global.acls.manageSystemACLs`).
    #   #
    #   # If running Consul OSS, requires permissions:
    #   # ```hcl
    #   # operator = "write"
    #   # service_prefix "" {
    #   #   policy = "write"
    #   #   intentions = "write"
    #   # }
    #   # ```
    #   # If running Consul Enterprise, talk to your account manager for assistance.
    #   aclToken:
    #     # The name of the Kubernetes secret.
    #     # @type: string
    #     secretName: null
    #     # The key of the Kubernetes secret.
    #     # @type: string
    #     secretKey: null

    # # Mesh Gateways enable Consul Connect to work across Consul datacenters.
    # meshGateway:
    #   # If mesh gateways are enabled, a Deployment will be created that runs
    #   # gateways and Consul Connect will be configured to use gateways.
    #   # See https://www.consul.io/docs/connect/mesh_gateway.html
    #   # Requirements: consul 1.6.0+ and consul-k8s 0.15.0+ if using
    #   # global.acls.manageSystemACLs.
    #   enabled: false

    #   # Number of replicas for the Deployment.
    #   replicas: 2

    #   # What gets registered as WAN address for the gateway.
    #   wanAddress:
    #     # source configures where to retrieve the WAN address (and possibly port)
    #     # for the mesh gateway from.
    #     # Can be set to either: `Service`, `NodeIP`, `NodeName` or `Static`.
    #     #
    #     # - `Service` - Determine the address based on the service type.
    #     #
    #     #   - If `service.type=LoadBalancer` use the external IP or hostname of
    #     #     the service. Use the port set by `service.port`.
    #     #
    #     #   - If `service.type=NodePort` use the Node IP. The port will be set to
    #     #     `service.nodePort` so `service.nodePort` cannot be null.
    #     #
    #     #   - If `service.type=ClusterIP` use the `ClusterIP`. The port will be set to
    #     #     `service.port`.
    #     #
    #     #   - `service.type=ExternalName` is not supported.
    #     #
    #     # - `NodeIP` - The node IP as provided by the Kubernetes downward API.
    #     #
    #     # - `NodeName` - The name of the node as provided by the Kubernetes downward
    #     #   API. This is useful if the node names are DNS entries that
    #     #   are routable from other datacenters.
    #     #
    #     # - `Static` - Use the address hardcoded in `meshGateway.wanAddress.static`.
    #     source: "Service"

    #     # Port that gets registered for WAN traffic.
    #     # If source is set to "Service" then this setting will have no effect.
    #     # See the documentation for source as to which port will be used in that
    #     # case.
    #     port: 443

    #     # If source is set to "Static" then this value will be used as the WAN
    #     # address of the mesh gateways. This is useful if you've configured a
    #     # DNS entry to point to your mesh gateways.
    #     static: ""

    #   # The service option configures the Service that fronts the Gateway Deployment.
    #   service:
    #     # Whether to create a Service or not.
    #     enabled: true

    #     # Type of service, ex. LoadBalancer, ClusterIP.
    #     type: LoadBalancer

    #     # Port that the service will be exposed on.
    #     # The targetPort will be set to meshGateway.containerPort.
    #     port: 443

    #     # Optionally set the nodePort value of the service if using a NodePort service.
    #     # If not set and using a NodePort service, Kubernetes will automatically assign
    #     # a port.
    #     # @type: integer
    #     nodePort: null

    #     # Annotations to apply to the mesh gateway service.
    #     #
    #     # Example:
    #     #
    #     # ```yaml
    #     # annotations: |
    #     #   'annotation-key': annotation-value
    #     # ```
    #     # @type: string
    #     annotations: null

    #     # Optional YAML string that will be appended to the Service spec.
    #     # @type: string
    #     additionalSpec: null

    #   # If set to true, gateway Pods will run on the host network.
    #   hostNetwork: false

    #   # dnsPolicy to use.
    #   # @type: string
    #   dnsPolicy: null

    #   # Consul service name for the mesh gateways.
    #   # Cannot be set to anything other than "mesh-gateway" if
    #   # global.acls.manageSystemACLs is true since the ACL token
    #   # generated is only for the name 'mesh-gateway'.
    #   consulServiceName: "mesh-gateway"

    #   # Port that the gateway will run on inside the container.
    #   containerPort: 8443

    #   # Optional hostPort for the gateway to be exposed on.
    #   # This can be used with wanAddress.port and wanAddress.useNodeIP
    #   # to expose the gateways directly from the node.
    #   # If hostNetwork is true, this must be null or set to the same port as
    #   # containerPort.
    #   # NOTE: Cannot set to 8500 or 8502 because those are reserved for the Consul
    #   # agent.
    #   # @type: integer
    #   hostPort: null

    #   serviceAccount:
    #     # This value defines additional annotations for the mesh gateways' service account. This should be formatted as a
    #     # multi-line string.
    #     #
    #     # ```yaml
    #     # annotations: |
    #     #   "sample/annotation1": "foo"
    #     #   "sample/annotation2": "bar"
    #     # ```
    #     #
    #     # @type: string
    #     annotations: null

    #   # Resource settings for mesh gateway pods.
    #   # NOTE: The use of a YAML string is deprecated. Instead, set directly as a
    #   # YAML map.
    #   # @recurse: false
    #   # @type: map
    #   resources:
    #     requests:
    #       memory: "100Mi"
    #       cpu: "100m"
    #     limits:
    #       memory: "100Mi"
    #       cpu: "100m"

    #   # Resource settings for the `copy-consul-bin` init container.
    #   # @recurse: false
    #   # @type: map
    #   initCopyConsulContainer:
    #     resources:
    #       requests:
    #         memory: "25Mi"
    #         cpu: "50m"
    #       limits:
    #         memory: "150Mi"
    #         cpu: "50m"

    #   # By default, we set an anti-affinity so that two gateway pods won't be
    #   # on the same node. NOTE: Gateways require that Consul client agents are
    #   # also running on the nodes alongside each gateway pod.
    #   affinity: |
    #     podAntiAffinity:
    #       requiredDuringSchedulingIgnoredDuringExecution:
    #         - labelSelector:
    #             matchLabels:
    #               app: {{ template "consul.name" . }}
    #               release: "{{ .Release.Name }}"
    #               component: mesh-gateway
    #           topologyKey: kubernetes.io/hostname

    #   # Optional YAML string to specify tolerations.
    #   # @type: string
    #   tolerations: null

    #   # Optional YAML string to specify a nodeSelector config.
    #   # @type: string
    #   nodeSelector: null

    #   # Optional priorityClassName.
    #   priorityClassName: ""

    #   # Annotations to apply to the mesh gateway deployment.
    #   #
    #   # Example:
    #   #
    #   # ```yaml
    #   # annotations: |
    #   #   'annotation-key': annotation-value
    #   # ```
    #   # @type: string
    #   annotations: null

    # # Configuration options for ingress gateways. Default values for all
    # # ingress gateways are defined in `ingressGateways.defaults`. Any of
    # # these values may be overridden in `ingressGateways.gateways` for a
    # # specific gateway with the exception of annotations. Annotations will
    # # include both the default annotations and any additional ones defined
    # # for a specific gateway.
    # # Requirements: consul >= 1.8.0 and consul-k8s >= 0.16.0 if using
    # # global.acls.manageSystemACLs and consul-k8s >= 0.10.0 if not.
    # ingressGateways:
    #   # Enable ingress gateway deployment. Requires `connectInject.enabled=true`
    #   # and `client.enabled=true`.
    #   enabled: false

    #   # Defaults sets default values for all gateway fields. With the exception
    #   # of annotations, defining any of these values in the `gateways` list
    #   # will override the default values provided here. Annotations will
    #   # include both the default annotations and any additional ones defined
    #   # for a specific gateway.
    #   defaults:
    #     # Number of replicas for each ingress gateway defined.
    #     replicas: 2

    #     # The service options configure the Service that fronts the gateway Deployment.
    #     service:
    #       # Type of service: LoadBalancer, ClusterIP or NodePort. If using NodePort service
    #       # type, you must set the desired nodePorts in the `ports` setting below.
    #       type: ClusterIP

    #       # Ports that will be exposed on the service and gateway container. Any
    #       # ports defined as ingress listeners on the gateway's Consul configuration
    #       # entry should be included here. The first port will be used as part of
    #       # the Consul service registration for the gateway and be listed in its
    #       # SRV record. If using a NodePort service type, you must specify the
    #       # desired nodePort for each exposed port.
    #       # @type: array<map>
    #       # @default: [{port: 8080, port: 8443}]
    #       # @recurse: false
    #       ports:
    #         - port: 8080
    #           nodePort: null
    #         - port: 8443
    #           nodePort: null

    #       # Annotations to apply to the ingress gateway service. Annotations defined
    #       # here will be applied to all ingress gateway services in addition to any
    #       # service annotations defined for a specific gateway in `ingressGateways.gateways`.
    #       #
    #       # Example:
    #       #
    #       # ```yaml
    #       # annotations: |
    #       #   'annotation-key': annotation-value
    #       # ```
    #       # @type: string
    #       annotations: null

    #       # Optional YAML string that will be appended to the Service spec.
    #       # @type: string
    #       additionalSpec: null

    #     serviceAccount:
    #       # This value defines additional annotations for the ingress gateways' service account. This should be formatted
    #       # as a multi-line string.
    #       #
    #       # ```yaml
    #       # annotations: |
    #       #   "sample/annotation1": "foo"
    #       #   "sample/annotation2": "bar"
    #       # ```
    #       #
    #       # @type: string
    #       annotations: null

    #     # Resource limits for all ingress gateway pods
    #     # @recurse: false
    #     # @type: map
    #     resources:
    #       requests:
    #         memory: "100Mi"
    #         cpu: "100m"
    #       limits:
    #         memory: "100Mi"
    #         cpu: "100m"

    #     # Resource settings for the `copy-consul-bin` init container.
    #     # @recurse: false
    #     # @type: map
    #     initCopyConsulContainer:
    #       resources:
    #         requests:
    #           memory: "25Mi"
    #           cpu: "50m"
    #         limits:
    #           memory: "150Mi"
    #           cpu: "50m"

    #     # By default, we set an anti-affinity so that two of the same gateway pods
    #     # won't be on the same node. NOTE: Gateways require that Consul client agents are
    #     # also running on the nodes alongside each gateway pod.
    #     affinity: |
    #       podAntiAffinity:
    #         requiredDuringSchedulingIgnoredDuringExecution:
    #           - labelSelector:
    #               matchLabels:
    #                 app: {{ template "consul.name" . }}
    #                 release: "{{ .Release.Name }}"
    #                 component: ingress-gateway
    #             topologyKey: kubernetes.io/hostname

    #     # Optional YAML string to specify tolerations.
    #     # @type: string
    #     tolerations: null

    #     # Optional YAML string to specify a nodeSelector config.
    #     # @type: string
    #     nodeSelector: null

    #     # Optional priorityClassName.
    #     priorityClassName: ""

    #     # Annotations to apply to the ingress gateway deployment. Annotations defined
    #     # here will be applied to all ingress gateway deployments in addition to any
    #     # annotations defined for a specific gateway in `ingressGateways.gateways`.
    #     #
    #     # Example:
    #     #
    #     # ```yaml
    #     # annotations: |
    #     #   "annotation-key": 'annotation-value'
    #     # ```
    #     # @type: string
    #     annotations: null

    #     # [Enterprise Only] `consulNamespace` defines the Consul namespace to register
    #     # the gateway into. Requires `global.enableConsulNamespaces` to be true and
    #     # Consul Enterprise v1.7+ with a valid Consul Enterprise license.
    #     # Note: The Consul namespace MUST exist before the gateway is deployed.
    #     consulNamespace: "default"

    #   # Gateways is a list of gateway objects. The only required field for
    #   # each is `name`, though they can also contain any of the fields in
    #   # `defaults`. Values defined here override the defaults except in the
    #   # case of annotations where both will be applied.
    #   # @type: array<map>
    #   gateways:
    #     - name: ingress-gateway

    # # Configuration options for terminating gateways. Default values for all
    # # terminating gateways are defined in `terminatingGateways.defaults`. Any of
    # # these values may be overridden in `terminatingGateways.gateways` for a
    # # specific gateway with the exception of annotations. Annotations will
    # # include both the default annotations and any additional ones defined
    # # for a specific gateway.
    # # Requirements: consul >= 1.8.0 and consul-k8s >= 0.16.0 if using
    # # global.acls.manageSystemACLs and consul-k8s >= 0.10.0 if not.
    # terminatingGateways:
    #   # Enable terminating gateway deployment. Requires `connectInject.enabled=true`
    #   # and `client.enabled=true`.
    #   enabled: false

    #   # Defaults sets default values for all gateway fields. With the exception
    #   # of annotations, defining any of these values in the `gateways` list
    #   # will override the default values provided here. Annotations will
    #   # include both the default annotations and any additional ones defined
    #   # for a specific gateway.
    #   defaults:
    #     # Number of replicas for each terminating gateway defined.
    #     replicas: 2

    #     # A list of extra volumes to mount. These will be exposed to Consul in the path `/consul/userconfig/<name>/`.
    #     #
    #     # Example:
    #     #
    #     # ```yaml
    #     # extraVolumes:
    #     #   - type: secret
    #     #     name: my-secret
    #     #     items: # optional items array
    #     #       - key: key
    #     #         path: path # secret will now mount to /consul/userconfig/my-secret/path
    #     # ```
    #     # @type: array<map>
    #     extraVolumes: []

    #     # Resource limits for all terminating gateway pods
    #     # @recurse: false
    #     # @type: map
    #     resources:
    #       requests:
    #         memory: "100Mi"
    #         cpu: "100m"
    #       limits:
    #         memory: "100Mi"
    #         cpu: "100m"

    #     # Resource settings for the `copy-consul-bin` init container.
    #     # @recurse: false
    #     # @type: map
    #     initCopyConsulContainer:
    #       resources:
    #         requests:
    #           memory: "25Mi"
    #           cpu: "50m"
    #         limits:
    #           memory: "150Mi"
    #           cpu: "50m"

    #     # By default, we set an anti-affinity so that two of the same gateway pods
    #     # won't be on the same node. NOTE: Gateways require that Consul client agents are
    #     # also running on the nodes alongside each gateway pod.
    #     affinity: |
    #       podAntiAffinity:
    #         requiredDuringSchedulingIgnoredDuringExecution:
    #           - labelSelector:
    #               matchLabels:
    #                 app: {{ template "consul.name" . }}
    #                 release: "{{ .Release.Name }}"
    #                 component: terminating-gateway
    #             topologyKey: kubernetes.io/hostname

    #     # Optional YAML string to specify tolerations.
    #     # @type: string
    #     tolerations: null

    #     # Optional YAML string to specify a nodeSelector config.
    #     # @type: string
    #     nodeSelector: null

    #     # Optional priorityClassName.
    #     # @type: string
    #     priorityClassName: ""

    #     # Annotations to apply to the terminating gateway deployment. Annotations defined
    #     # here will be applied to all terminating gateway deployments in addition to any
    #     # annotations defined for a specific gateway in `terminatingGateways.gateways`.
    #     #
    #     # Example:
    #     #
    #     # ```yaml
    #     # annotations: |
    #     #   'annotation-key': annotation-value
    #     # ```
    #     # @type: string
    #     annotations: null

    #     serviceAccount:
    #       # This value defines additional annotations for the terminating gateways' service account. This should be
    #       # formatted as a multi-line string.
    #       #
    #       # ```yaml
    #       # annotations: |
    #       #   "sample/annotation1": "foo"
    #       #   "sample/annotation2": "bar"
    #       # ```
    #       #
    #       # @type: string
    #       annotations: null

    #     # [Enterprise Only] `consulNamespace` defines the Consul namespace to register
    #     # the gateway into. Requires `global.enableConsulNamespaces` to be true and
    #     # Consul Enterprise v1.7+ with a valid Consul Enterprise license.
    #     # Note: The Consul namespace MUST exist before the gateway is deployed.
    #     consulNamespace: "default"

    #   # Gateways is a list of gateway objects. The only required field for
    #   # each is `name`, though they can also contain any of the fields in
    #   # `defaults`. Values defined here override the defaults except in the
    #   # case of annotations where both will be applied.
    #   # @type: array<map>
    #   gateways:
    #     - name: terminating-gateway

    # # Configures a demo Prometheus installation.
    # prometheus:
    #   # When true, the Helm chart will install a demo Prometheus server instance
    #   # alongside Consul.
    #   enabled: false

    # # Control whether a test Pod manifest is generated when running helm template.
    # # When using helm install, the test Pod is not submitted to the cluster so this
    # # is only useful when running helm template.
    # tests:
    #   enabled: true
